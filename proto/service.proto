syntax = "proto2";
package billing;

import "google/protobuf/timestamp.proto";


enum SERVICE_TYPE {
    WATER =0;
    SEWER=1;
    ELECTRICITY=2;
    GAS=3;
    HYDRANT=4;
    FIRE=5;
}

enum CONNECTION_STATUS_TYPE {
    CONNECTED_WITHOUT_METER =0;
    CONNECTED_WITH_METER=1;
    DISCONNECTED_WITH_METER=2;
    DISCONNECTED_WITHOUT_METER=3;
}


enum READING_TYPE {
    ACTUAL =0;
    AVERAGE=1;//return
    ESTIMATE=2;//not return
}

enum RegularChargePeriod {
    BILL=1;
    MONTHLY=2;
}

enum ENTITY_TYPE {
    CTYPE=1;
    CTYPE_GROUP=2;
    CUSTOMER_TYPE=3;
    CUSTOMER_FLAG1=4;
    CUSTOMER_FLAG2=5;
    CUSTOMER_FLAG3=6;
    CUSTOMER_FLAG4=7;
    CUSTOMER_FLAG5=8;
    PROPERTY_VACATED=9;//
    PROPERTY_FLAG1=10;//
    PROPERTY_FLAG2=11;//
    PROPERTY_FLAG3=12;//
    PROPERTY_FLAG4=13;//
    PROPERTY_FLAG5=14;//
    CONNECTION_DIAMETER=15;//
    CONNECTION_STATUS=16;//
    CONNECTION_ISBULK_METER=18;//
    METER_DIAMETER=19;//
    SERVICE=20;
    TOWINSHIP=21;
}

enum ChargeRegularCTypeCalcBase {
    MAIN_CTYPE=1;
    SUM_CTYPES=2;
    HIGHTEST_AMOUNT=3;
    LOWEST_AMOUNT=4;
    HIGHT_PERCENTAGE=5;
    LOW_PERCENTAGE=6;
    SUM_DISIICT_CTYPE_GROUP=7;
    HIGHTEST_CTYPE_GROUP_AMOUNT=8;
    LOWEST_CTYPE_GROUP_AMOUNT=9;
}

//the entity meter used as entity type for calculation or enabling 
//while the consump claculated 
message Meter {
    required string MeterType = 1;    
    required string MeterRef = 2;    
    required int64 Diameter=3;
    optional int64 ConverterFactor=4;
}

//used for sub connection calculations and entity calculations

message Connection {
    required string CType =1;
    required string CTYPE_GROUP=2;
    required int64 NoUnits=3;   
    optional bool IsBulkMeter=4;
    optional int64 ConnDiameter=5;
    optional Meter Meter=6;
    optional double EstimCons=7;
    optional CONNECTION_STATUS_TYPE ConnectionStatus=8;
    repeated SubConnection SubConnections=9;
}


message SubConnection {
    required string CType =1;
    required string CTYPE_GROUP=2;
    optional double EstimateConsumptionPerUnit=3;
    optional double ConsumptionPercentage=4;
    optional int64 NoUnits=5;
}


message Service {
    required SERVICE_TYPE ServiceType = 1;
    required Connection Connection=2;
}


message Property {
    required string PropRef =1;
    optional string InfoFlag1 =3;
    optional string InfoFlag2 =4;
    optional string InfoFlag3 =5;
    optional string InfoFlag4 =6;
    optional string InfoFlag5 =7;
    optional int64 NoRooms=8;   
    repeated Service Services=9;
    optional bool IsVacated=10;
    optional string TOWINSHIP=11;
}

message Customer {
    required string Custkey =1;
    required int64 CustType=2;
    optional bool IsCompany =3;
    optional string InfoFlag1 =4;
    optional string InfoFlag2 =5;
    optional string InfoFlag3 =6;
    optional string InfoFlag4 =7;
    optional string InfoFlag5 =8;
    optional Property Property=9;
}

//is overall all actual or estim consumption for each service
message Reading {
    required double Consump=1;
    required READING_TYPE ReadingType=2;
    optional double PrReading = 3; 
    optional double CrReading=4;
    optional google.protobuf.Timestamp PR_DATE=5;
    optional google.protobuf.Timestamp CR_DATE=6;
}

//each service may be has its meter (server meters,fire meters,electrcity meters)
message ServiceReading {
    required SERVICE_TYPE ServiceType = 1;
    required Reading Reading=2;
}
// each billing request should have the customer entity and the reading for each service
message BillRequest{
    required Customer Customer=1;
    repeated ServiceReading ServicesReadings=2;
    required bool IgnoreTimeEffect=3;
}

//the expected responce is the amount for each service
message ExtraCharge{
    optional string DESCRIPTION=1;
    required string Code=2;
    required double Amount=3;
}

message BillResponceItemCtg {
    required double CType=1;
    required double Amount=2;
    optional double TaxAmount=3;
}

message BillResponceItem{
    required SERVICE_TYPE ServiceType = 1;
    repeated BillResponceItemCtg Charges=2;
    repeated ExtraCharge ExtraCharges=99;
}

message BillResponce{
    repeated BillResponceItem Charges=1;
}

///////////////////////////
//Tariff

message ServiceTariff{
    required SERVICE_TYPE ServiceType = 1;
    required string TarifId = 2;
}

message Ctg{
    required string CType =1;
    repeated ServiceTariff Tariffs=2;
}

message CtgRequest{
    repeated Ctg Ctgs=2;
}
message ExtraTariffFess {
    required string Code =1;
    optional string Description =2;
    optional double AmountPerMeter=3;
    optional double AmountPercentage=4;
    optional double FixedAmount=5;
}

message TariffBand {
 required double From =1;
 required double To=2;
 required double Constant=3;
 required double Factor=4;
}

message Tariff {
    required string TariffId =1;
    optional double TaxPercentage=2;
    optional double DiscountPercentage=3;
    repeated ExtraTariffFess ExtraFees=4;
    repeated TariffBand Bands=5;
}
message TariffRequest {
    repeated Tariff Tariffs=1;
}
message Empty {
}



////////////////////Regular Charges  ////////

message EntityChargeMappedValue{
    optional double From =1;
    optional double To=2;
    optional string LuKey=3;
    optional double Value=4;    
}

message EntityEnableMappedValue{
    required string LuKey=3;
    optional bool Value=4;    
}

message RegularChargeEntity {
    required string Code=1;
    required ENTITY_TYPE EntityType=2;    
    //required string EntityField=3;    
    optional bool PerUnit=4;
    optional bool Fixed=5;
    repeated EntityChargeMappedValue MappedValues=6;
}

message RegularEnableEntity {
    required string Code=1;
    required ENTITY_TYPE EntityType=2;    
    //required string EntityField=3;    
    repeated EntityEnableMappedValue MappedValues=6;
}

message RegularCharge{
    required google.protobuf.Timestamp EffectiveDate=1;
    required int64 TransCode=2;
    required int64 TransSCode=3;
    required string TransTitle=4;
    optional string TransSTitle=5;
    required bool IsChargable=6;
    required RegularChargePeriod ChargeCalcPeriod=7;
    optional int64 ChargeInterval=9;//monthly interval
    optional int64 ChargeMonthlyDay=10;//day of the mounth
    optional int64 ChargeType=11;
    optional double FixedCharge=12;
    optional double FixedChargeDiscount=13;
    optional double MinCharge=14;
    optional double VatPercentage=15;
    optional RegularChargeEntity RelationChargeEntity=16;
    optional RegularEnableEntity RelationEnableEntity=17;
    optional bool Bypass=18;
    optional ChargeRegularCTypeCalcBase CTypeCalcBase=19;
}

message RegularChargeRequest {
    repeated RegularCharge RegularCharge=1;
}

message SetupRequest {
    repeated Tariff Tariffs=1;
    repeated Ctg Ctgs=2;
    repeated RegularCharge RegularCharge=3;
}

///////Service///////////////
service BillingService {
  rpc Charge (BillRequest) returns (BillResponce) {}
  rpc Setup(SetupRequest) returns (Empty) {}
}