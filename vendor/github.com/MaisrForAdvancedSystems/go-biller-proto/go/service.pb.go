// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: service.proto

package billing

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VERION int32

const (
	VERION_PROTO_VERSION VERION = 57
)

// Enum value maps for VERION.
var (
	VERION_name = map[int32]string{
		57: "PROTO_VERSION",
	}
	VERION_value = map[string]int32{
		"PROTO_VERSION": 57,
	}
)

func (x VERION) Enum() *VERION {
	p := new(VERION)
	*p = x
	return p
}

func (x VERION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VERION) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (VERION) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x VERION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VERION) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VERION(num)
	return nil
}

// Deprecated: Use VERION.Descriptor instead.
func (VERION) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

type MeterOperationStatus int32

const (
	MeterOperationStatus_WORKING     MeterOperationStatus = 0
	MeterOperationStatus_NOT_WORKING MeterOperationStatus = 1
)

// Enum value maps for MeterOperationStatus.
var (
	MeterOperationStatus_name = map[int32]string{
		0: "WORKING",
		1: "NOT_WORKING",
	}
	MeterOperationStatus_value = map[string]int32{
		"WORKING":     0,
		"NOT_WORKING": 1,
	}
)

func (x MeterOperationStatus) Enum() *MeterOperationStatus {
	p := new(MeterOperationStatus)
	*p = x
	return p
}

func (x MeterOperationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeterOperationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[1].Descriptor()
}

func (MeterOperationStatus) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[1]
}

func (x MeterOperationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MeterOperationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MeterOperationStatus(num)
	return nil
}

// Deprecated: Use MeterOperationStatus.Descriptor instead.
func (MeterOperationStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

type SERVICE_TYPE int32

const (
	SERVICE_TYPE_WATER       SERVICE_TYPE = 0
	SERVICE_TYPE_SEWER       SERVICE_TYPE = 1
	SERVICE_TYPE_ELECTRICITY SERVICE_TYPE = 2
	SERVICE_TYPE_GAS         SERVICE_TYPE = 3
	SERVICE_TYPE_HYDRANT     SERVICE_TYPE = 4
	SERVICE_TYPE_FIRE        SERVICE_TYPE = 5
)

// Enum value maps for SERVICE_TYPE.
var (
	SERVICE_TYPE_name = map[int32]string{
		0: "WATER",
		1: "SEWER",
		2: "ELECTRICITY",
		3: "GAS",
		4: "HYDRANT",
		5: "FIRE",
	}
	SERVICE_TYPE_value = map[string]int32{
		"WATER":       0,
		"SEWER":       1,
		"ELECTRICITY": 2,
		"GAS":         3,
		"HYDRANT":     4,
		"FIRE":        5,
	}
)

func (x SERVICE_TYPE) Enum() *SERVICE_TYPE {
	p := new(SERVICE_TYPE)
	*p = x
	return p
}

func (x SERVICE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SERVICE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[2].Descriptor()
}

func (SERVICE_TYPE) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[2]
}

func (x SERVICE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SERVICE_TYPE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SERVICE_TYPE(num)
	return nil
}

// Deprecated: Use SERVICE_TYPE.Descriptor instead.
func (SERVICE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

type CONNECTION_STATUS_TYPE int32

const (
	CONNECTION_STATUS_TYPE_CONNECTED_WITHOUT_METER    CONNECTION_STATUS_TYPE = 0
	CONNECTION_STATUS_TYPE_CONNECTED_WITH_METER       CONNECTION_STATUS_TYPE = 1
	CONNECTION_STATUS_TYPE_DISCONNECTED_WITH_METER    CONNECTION_STATUS_TYPE = 2
	CONNECTION_STATUS_TYPE_DISCONNECTED_WITHOUT_METER CONNECTION_STATUS_TYPE = 3
)

// Enum value maps for CONNECTION_STATUS_TYPE.
var (
	CONNECTION_STATUS_TYPE_name = map[int32]string{
		0: "CONNECTED_WITHOUT_METER",
		1: "CONNECTED_WITH_METER",
		2: "DISCONNECTED_WITH_METER",
		3: "DISCONNECTED_WITHOUT_METER",
	}
	CONNECTION_STATUS_TYPE_value = map[string]int32{
		"CONNECTED_WITHOUT_METER":    0,
		"CONNECTED_WITH_METER":       1,
		"DISCONNECTED_WITH_METER":    2,
		"DISCONNECTED_WITHOUT_METER": 3,
	}
)

func (x CONNECTION_STATUS_TYPE) Enum() *CONNECTION_STATUS_TYPE {
	p := new(CONNECTION_STATUS_TYPE)
	*p = x
	return p
}

func (x CONNECTION_STATUS_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONNECTION_STATUS_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[3].Descriptor()
}

func (CONNECTION_STATUS_TYPE) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[3]
}

func (x CONNECTION_STATUS_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CONNECTION_STATUS_TYPE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CONNECTION_STATUS_TYPE(num)
	return nil
}

// Deprecated: Use CONNECTION_STATUS_TYPE.Descriptor instead.
func (CONNECTION_STATUS_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

type READING_TYPE int32

const (
	READING_TYPE_ACTUAL   READING_TYPE = 0
	READING_TYPE_AVERAGE  READING_TYPE = 1 //return
	READING_TYPE_ESTIMATE READING_TYPE = 2 //not return
)

// Enum value maps for READING_TYPE.
var (
	READING_TYPE_name = map[int32]string{
		0: "ACTUAL",
		1: "AVERAGE",
		2: "ESTIMATE",
	}
	READING_TYPE_value = map[string]int32{
		"ACTUAL":   0,
		"AVERAGE":  1,
		"ESTIMATE": 2,
	}
)

func (x READING_TYPE) Enum() *READING_TYPE {
	p := new(READING_TYPE)
	*p = x
	return p
}

func (x READING_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (READING_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[4].Descriptor()
}

func (READING_TYPE) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[4]
}

func (x READING_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *READING_TYPE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = READING_TYPE(num)
	return nil
}

// Deprecated: Use READING_TYPE.Descriptor instead.
func (READING_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

type RegularChargePeriod int32

const (
	RegularChargePeriod_BILL    RegularChargePeriod = 1
	RegularChargePeriod_MONTHLY RegularChargePeriod = 2
)

// Enum value maps for RegularChargePeriod.
var (
	RegularChargePeriod_name = map[int32]string{
		1: "BILL",
		2: "MONTHLY",
	}
	RegularChargePeriod_value = map[string]int32{
		"BILL":    1,
		"MONTHLY": 2,
	}
)

func (x RegularChargePeriod) Enum() *RegularChargePeriod {
	p := new(RegularChargePeriod)
	*p = x
	return p
}

func (x RegularChargePeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegularChargePeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[5].Descriptor()
}

func (RegularChargePeriod) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[5]
}

func (x RegularChargePeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegularChargePeriod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegularChargePeriod(num)
	return nil
}

// Deprecated: Use RegularChargePeriod.Descriptor instead.
func (RegularChargePeriod) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

type ENTITY_TYPE int32

const (
	ENTITY_TYPE_CTYPE                   ENTITY_TYPE = 1
	ENTITY_TYPE_CTYPE_GROUP             ENTITY_TYPE = 2
	ENTITY_TYPE_CUSTOMER_TYPE           ENTITY_TYPE = 3
	ENTITY_TYPE_CUSTOMER_FLAG1          ENTITY_TYPE = 4
	ENTITY_TYPE_CUSTOMER_FLAG2          ENTITY_TYPE = 5
	ENTITY_TYPE_CUSTOMER_FLAG3          ENTITY_TYPE = 6
	ENTITY_TYPE_CUSTOMER_FLAG4          ENTITY_TYPE = 7
	ENTITY_TYPE_CUSTOMER_FLAG5          ENTITY_TYPE = 8
	ENTITY_TYPE_PROPERTY_VACATED        ENTITY_TYPE = 9  //
	ENTITY_TYPE_PROPERTY_FLAG1          ENTITY_TYPE = 10 //
	ENTITY_TYPE_PROPERTY_FLAG2          ENTITY_TYPE = 11 //
	ENTITY_TYPE_PROPERTY_FLAG3          ENTITY_TYPE = 12 //
	ENTITY_TYPE_PROPERTY_FLAG4          ENTITY_TYPE = 13 //
	ENTITY_TYPE_PROPERTY_FLAG5          ENTITY_TYPE = 14 //
	ENTITY_TYPE_CONNECTION_DIAMETER     ENTITY_TYPE = 15 //
	ENTITY_TYPE_CONNECTION_STATUS       ENTITY_TYPE = 16 //
	ENTITY_TYPE_CONNECTION_ISBULK_METER ENTITY_TYPE = 18 //
	ENTITY_TYPE_METER_DIAMETER          ENTITY_TYPE = 19 //
	ENTITY_TYPE_SERVICE                 ENTITY_TYPE = 20
	ENTITY_TYPE_TOWINSHIP               ENTITY_TYPE = 21
)

// Enum value maps for ENTITY_TYPE.
var (
	ENTITY_TYPE_name = map[int32]string{
		1:  "CTYPE",
		2:  "CTYPE_GROUP",
		3:  "CUSTOMER_TYPE",
		4:  "CUSTOMER_FLAG1",
		5:  "CUSTOMER_FLAG2",
		6:  "CUSTOMER_FLAG3",
		7:  "CUSTOMER_FLAG4",
		8:  "CUSTOMER_FLAG5",
		9:  "PROPERTY_VACATED",
		10: "PROPERTY_FLAG1",
		11: "PROPERTY_FLAG2",
		12: "PROPERTY_FLAG3",
		13: "PROPERTY_FLAG4",
		14: "PROPERTY_FLAG5",
		15: "CONNECTION_DIAMETER",
		16: "CONNECTION_STATUS",
		18: "CONNECTION_ISBULK_METER",
		19: "METER_DIAMETER",
		20: "SERVICE",
		21: "TOWINSHIP",
	}
	ENTITY_TYPE_value = map[string]int32{
		"CTYPE":                   1,
		"CTYPE_GROUP":             2,
		"CUSTOMER_TYPE":           3,
		"CUSTOMER_FLAG1":          4,
		"CUSTOMER_FLAG2":          5,
		"CUSTOMER_FLAG3":          6,
		"CUSTOMER_FLAG4":          7,
		"CUSTOMER_FLAG5":          8,
		"PROPERTY_VACATED":        9,
		"PROPERTY_FLAG1":          10,
		"PROPERTY_FLAG2":          11,
		"PROPERTY_FLAG3":          12,
		"PROPERTY_FLAG4":          13,
		"PROPERTY_FLAG5":          14,
		"CONNECTION_DIAMETER":     15,
		"CONNECTION_STATUS":       16,
		"CONNECTION_ISBULK_METER": 18,
		"METER_DIAMETER":          19,
		"SERVICE":                 20,
		"TOWINSHIP":               21,
	}
)

func (x ENTITY_TYPE) Enum() *ENTITY_TYPE {
	p := new(ENTITY_TYPE)
	*p = x
	return p
}

func (x ENTITY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENTITY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[6].Descriptor()
}

func (ENTITY_TYPE) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[6]
}

func (x ENTITY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENTITY_TYPE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENTITY_TYPE(num)
	return nil
}

// Deprecated: Use ENTITY_TYPE.Descriptor instead.
func (ENTITY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

type ChargeRegularCalcStrategy int32

const (
	ChargeRegularCalcStrategy_EACH_ONE                    ChargeRegularCalcStrategy = 0
	ChargeRegularCalcStrategy_SUM_ALL                     ChargeRegularCalcStrategy = 1
	ChargeRegularCalcStrategy_MAIN_CTYPE                  ChargeRegularCalcStrategy = 2
	ChargeRegularCalcStrategy_HIGHTEST_AMOUNT             ChargeRegularCalcStrategy = 3
	ChargeRegularCalcStrategy_LOWEST_AMOUNT               ChargeRegularCalcStrategy = 4
	ChargeRegularCalcStrategy_DUPPLICATE_EACH_CTYPE       ChargeRegularCalcStrategy = 5
	ChargeRegularCalcStrategy_DUPPLICATE_EACH_CTYPE_GROUP ChargeRegularCalcStrategy = 6 //giza style
)

// Enum value maps for ChargeRegularCalcStrategy.
var (
	ChargeRegularCalcStrategy_name = map[int32]string{
		0: "EACH_ONE",
		1: "SUM_ALL",
		2: "MAIN_CTYPE",
		3: "HIGHTEST_AMOUNT",
		4: "LOWEST_AMOUNT",
		5: "DUPPLICATE_EACH_CTYPE",
		6: "DUPPLICATE_EACH_CTYPE_GROUP",
	}
	ChargeRegularCalcStrategy_value = map[string]int32{
		"EACH_ONE":                    0,
		"SUM_ALL":                     1,
		"MAIN_CTYPE":                  2,
		"HIGHTEST_AMOUNT":             3,
		"LOWEST_AMOUNT":               4,
		"DUPPLICATE_EACH_CTYPE":       5,
		"DUPPLICATE_EACH_CTYPE_GROUP": 6,
	}
)

func (x ChargeRegularCalcStrategy) Enum() *ChargeRegularCalcStrategy {
	p := new(ChargeRegularCalcStrategy)
	*p = x
	return p
}

func (x ChargeRegularCalcStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeRegularCalcStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[7].Descriptor()
}

func (ChargeRegularCalcStrategy) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[7]
}

func (x ChargeRegularCalcStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChargeRegularCalcStrategy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChargeRegularCalcStrategy(num)
	return nil
}

// Deprecated: Use ChargeRegularCalcStrategy.Descriptor instead.
func (ChargeRegularCalcStrategy) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

type ChargeType int32

const (
	ChargeType_FIXED    ChargeType = 0
	ChargeType_RELATION ChargeType = 1
)

// Enum value maps for ChargeType.
var (
	ChargeType_name = map[int32]string{
		0: "FIXED",
		1: "RELATION",
	}
	ChargeType_value = map[string]int32{
		"FIXED":    0,
		"RELATION": 1,
	}
)

func (x ChargeType) Enum() *ChargeType {
	p := new(ChargeType)
	*p = x
	return p
}

func (x ChargeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[8].Descriptor()
}

func (ChargeType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[8]
}

func (x ChargeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChargeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChargeType(num)
	return nil
}

// Deprecated: Use ChargeType.Descriptor instead.
func (ChargeType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

type ReleationType int32

const (
	ReleationType_ENABLE_RELEATION ReleationType = 1
	ReleationType_CHARGE_RELEATION ReleationType = 2
)

// Enum value maps for ReleationType.
var (
	ReleationType_name = map[int32]string{
		1: "ENABLE_RELEATION",
		2: "CHARGE_RELEATION",
	}
	ReleationType_value = map[string]int32{
		"ENABLE_RELEATION": 1,
		"CHARGE_RELEATION": 2,
	}
)

func (x ReleationType) Enum() *ReleationType {
	p := new(ReleationType)
	*p = x
	return p
}

func (x ReleationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleationType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[9].Descriptor()
}

func (ReleationType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[9]
}

func (x ReleationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReleationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReleationType(num)
	return nil
}

// Deprecated: Use ReleationType.Descriptor instead.
func (ReleationType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

//the entity meter used as entity type for calculation or enabling
//while the consump claculated
type Meter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeterType       *string               `protobuf:"bytes,1,req,name=MeterType" json:"MeterType,omitempty"`
	MeterRef        *string               `protobuf:"bytes,2,req,name=MeterRef" json:"MeterRef,omitempty"`
	Diameter        *int64                `protobuf:"varint,3,req,name=Diameter" json:"Diameter,omitempty"`
	ConverterFactor *int64                `protobuf:"varint,4,opt,name=ConverterFactor" json:"ConverterFactor,omitempty"`
	OpStatus        *MeterOperationStatus `protobuf:"varint,5,req,name=OpStatus,enum=billing.MeterOperationStatus" json:"OpStatus,omitempty"`
}

func (x *Meter) Reset() {
	*x = Meter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meter) ProtoMessage() {}

func (x *Meter) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meter.ProtoReflect.Descriptor instead.
func (*Meter) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *Meter) GetMeterType() string {
	if x != nil && x.MeterType != nil {
		return *x.MeterType
	}
	return ""
}

func (x *Meter) GetMeterRef() string {
	if x != nil && x.MeterRef != nil {
		return *x.MeterRef
	}
	return ""
}

func (x *Meter) GetDiameter() int64 {
	if x != nil && x.Diameter != nil {
		return *x.Diameter
	}
	return 0
}

func (x *Meter) GetConverterFactor() int64 {
	if x != nil && x.ConverterFactor != nil {
		return *x.ConverterFactor
	}
	return 0
}

func (x *Meter) GetOpStatus() MeterOperationStatus {
	if x != nil && x.OpStatus != nil {
		return *x.OpStatus
	}
	return MeterOperationStatus_WORKING
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CType *Ctg `protobuf:"bytes,1,req,name=CType" json:"CType,omitempty"`
	//required string CTYPE_GROUP=2;
	NoUnits          *int64                  `protobuf:"varint,3,req,name=NoUnits" json:"NoUnits,omitempty"`
	IsBulkMeter      *bool                   `protobuf:"varint,4,opt,name=IsBulkMeter" json:"IsBulkMeter,omitempty"`
	ConnDiameter     *int64                  `protobuf:"varint,5,opt,name=ConnDiameter" json:"ConnDiameter,omitempty"`
	Meter            *Meter                  `protobuf:"bytes,6,opt,name=Meter" json:"Meter,omitempty"`
	EstimCons        *float64                `protobuf:"fixed64,7,opt,name=EstimCons" json:"EstimCons,omitempty"`
	ConnectionStatus *CONNECTION_STATUS_TYPE `protobuf:"varint,8,opt,name=ConnectionStatus,enum=billing.CONNECTION_STATUS_TYPE" json:"ConnectionStatus,omitempty"`
	SubConnections   []*SubConnection        `protobuf:"bytes,9,rep,name=SubConnections" json:"SubConnections,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *Connection) GetCType() *Ctg {
	if x != nil {
		return x.CType
	}
	return nil
}

func (x *Connection) GetNoUnits() int64 {
	if x != nil && x.NoUnits != nil {
		return *x.NoUnits
	}
	return 0
}

func (x *Connection) GetIsBulkMeter() bool {
	if x != nil && x.IsBulkMeter != nil {
		return *x.IsBulkMeter
	}
	return false
}

func (x *Connection) GetConnDiameter() int64 {
	if x != nil && x.ConnDiameter != nil {
		return *x.ConnDiameter
	}
	return 0
}

func (x *Connection) GetMeter() *Meter {
	if x != nil {
		return x.Meter
	}
	return nil
}

func (x *Connection) GetEstimCons() float64 {
	if x != nil && x.EstimCons != nil {
		return *x.EstimCons
	}
	return 0
}

func (x *Connection) GetConnectionStatus() CONNECTION_STATUS_TYPE {
	if x != nil && x.ConnectionStatus != nil {
		return *x.ConnectionStatus
	}
	return CONNECTION_STATUS_TYPE_CONNECTED_WITHOUT_METER
}

func (x *Connection) GetSubConnections() []*SubConnection {
	if x != nil {
		return x.SubConnections
	}
	return nil
}

type SubConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CType                 *Ctg     `protobuf:"bytes,1,req,name=CType" json:"CType,omitempty"`
	EstimateConsumption   *float64 `protobuf:"fixed64,3,opt,name=EstimateConsumption" json:"EstimateConsumption,omitempty"`
	ConsumptionPercentage *float64 `protobuf:"fixed64,4,opt,name=ConsumptionPercentage" json:"ConsumptionPercentage,omitempty"`
	NoUnits               *int64   `protobuf:"varint,5,opt,name=NoUnits" json:"NoUnits,omitempty"`
}

func (x *SubConnection) Reset() {
	*x = SubConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubConnection) ProtoMessage() {}

func (x *SubConnection) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubConnection.ProtoReflect.Descriptor instead.
func (*SubConnection) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *SubConnection) GetCType() *Ctg {
	if x != nil {
		return x.CType
	}
	return nil
}

func (x *SubConnection) GetEstimateConsumption() float64 {
	if x != nil && x.EstimateConsumption != nil {
		return *x.EstimateConsumption
	}
	return 0
}

func (x *SubConnection) GetConsumptionPercentage() float64 {
	if x != nil && x.ConsumptionPercentage != nil {
		return *x.ConsumptionPercentage
	}
	return 0
}

func (x *SubConnection) GetNoUnits() int64 {
	if x != nil && x.NoUnits != nil {
		return *x.NoUnits
	}
	return 0
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType *SERVICE_TYPE `protobuf:"varint,1,req,name=ServiceType,enum=billing.SERVICE_TYPE" json:"ServiceType,omitempty"`
	Connection  *Connection   `protobuf:"bytes,2,req,name=Connection" json:"Connection,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *Service) GetServiceType() SERVICE_TYPE {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return SERVICE_TYPE_WATER
}

func (x *Service) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropRef   *string    `protobuf:"bytes,1,req,name=PropRef" json:"PropRef,omitempty"`
	InfoFlag1 *string    `protobuf:"bytes,3,opt,name=InfoFlag1" json:"InfoFlag1,omitempty"`
	InfoFlag2 *string    `protobuf:"bytes,4,opt,name=InfoFlag2" json:"InfoFlag2,omitempty"`
	InfoFlag3 *string    `protobuf:"bytes,5,opt,name=InfoFlag3" json:"InfoFlag3,omitempty"`
	InfoFlag4 *string    `protobuf:"bytes,6,opt,name=InfoFlag4" json:"InfoFlag4,omitempty"`
	InfoFlag5 *string    `protobuf:"bytes,7,opt,name=InfoFlag5" json:"InfoFlag5,omitempty"`
	NoRooms   *int64     `protobuf:"varint,8,opt,name=NoRooms" json:"NoRooms,omitempty"`
	Services  []*Service `protobuf:"bytes,9,rep,name=Services" json:"Services,omitempty"`
	IsVacated *bool      `protobuf:"varint,10,opt,name=IsVacated" json:"IsVacated,omitempty"`
	Township  *string    `protobuf:"bytes,11,opt,name=Township" json:"Township,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *Property) GetPropRef() string {
	if x != nil && x.PropRef != nil {
		return *x.PropRef
	}
	return ""
}

func (x *Property) GetInfoFlag1() string {
	if x != nil && x.InfoFlag1 != nil {
		return *x.InfoFlag1
	}
	return ""
}

func (x *Property) GetInfoFlag2() string {
	if x != nil && x.InfoFlag2 != nil {
		return *x.InfoFlag2
	}
	return ""
}

func (x *Property) GetInfoFlag3() string {
	if x != nil && x.InfoFlag3 != nil {
		return *x.InfoFlag3
	}
	return ""
}

func (x *Property) GetInfoFlag4() string {
	if x != nil && x.InfoFlag4 != nil {
		return *x.InfoFlag4
	}
	return ""
}

func (x *Property) GetInfoFlag5() string {
	if x != nil && x.InfoFlag5 != nil {
		return *x.InfoFlag5
	}
	return ""
}

func (x *Property) GetNoRooms() int64 {
	if x != nil && x.NoRooms != nil {
		return *x.NoRooms
	}
	return 0
}

func (x *Property) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Property) GetIsVacated() bool {
	if x != nil && x.IsVacated != nil {
		return *x.IsVacated
	}
	return false
}

func (x *Property) GetTownship() string {
	if x != nil && x.Township != nil {
		return *x.Township
	}
	return ""
}

type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custkey   *string   `protobuf:"bytes,1,req,name=Custkey" json:"Custkey,omitempty"`
	CustType  *int64    `protobuf:"varint,2,req,name=CustType" json:"CustType,omitempty"`
	IsCompany *bool     `protobuf:"varint,3,opt,name=IsCompany" json:"IsCompany,omitempty"`
	InfoFlag1 *string   `protobuf:"bytes,4,opt,name=InfoFlag1" json:"InfoFlag1,omitempty"`
	InfoFlag2 *string   `protobuf:"bytes,5,opt,name=InfoFlag2" json:"InfoFlag2,omitempty"`
	InfoFlag3 *string   `protobuf:"bytes,6,opt,name=InfoFlag3" json:"InfoFlag3,omitempty"`
	InfoFlag4 *string   `protobuf:"bytes,7,opt,name=InfoFlag4" json:"InfoFlag4,omitempty"`
	InfoFlag5 *string   `protobuf:"bytes,8,opt,name=InfoFlag5" json:"InfoFlag5,omitempty"`
	Property  *Property `protobuf:"bytes,9,opt,name=Property" json:"Property,omitempty"`
	Billgroup *string   `protobuf:"bytes,10,req,name=Billgroup" json:"Billgroup,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *Customer) GetCustkey() string {
	if x != nil && x.Custkey != nil {
		return *x.Custkey
	}
	return ""
}

func (x *Customer) GetCustType() int64 {
	if x != nil && x.CustType != nil {
		return *x.CustType
	}
	return 0
}

func (x *Customer) GetIsCompany() bool {
	if x != nil && x.IsCompany != nil {
		return *x.IsCompany
	}
	return false
}

func (x *Customer) GetInfoFlag1() string {
	if x != nil && x.InfoFlag1 != nil {
		return *x.InfoFlag1
	}
	return ""
}

func (x *Customer) GetInfoFlag2() string {
	if x != nil && x.InfoFlag2 != nil {
		return *x.InfoFlag2
	}
	return ""
}

func (x *Customer) GetInfoFlag3() string {
	if x != nil && x.InfoFlag3 != nil {
		return *x.InfoFlag3
	}
	return ""
}

func (x *Customer) GetInfoFlag4() string {
	if x != nil && x.InfoFlag4 != nil {
		return *x.InfoFlag4
	}
	return ""
}

func (x *Customer) GetInfoFlag5() string {
	if x != nil && x.InfoFlag5 != nil {
		return *x.InfoFlag5
	}
	return ""
}

func (x *Customer) GetProperty() *Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *Customer) GetBillgroup() string {
	if x != nil && x.Billgroup != nil {
		return *x.Billgroup
	}
	return ""
}

type ServiceTariff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType        *SERVICE_TYPE `protobuf:"varint,1,req,name=ServiceType,enum=billing.SERVICE_TYPE" json:"ServiceType,omitempty"`
	TariffCode         *string       `protobuf:"bytes,2,opt,name=TariffCode" json:"TariffCode,omitempty"`
	IsZeroTarif        *bool         `protobuf:"varint,3,opt,name=IsZeroTarif" json:"IsZeroTarif,omitempty"` //usful in case if main connection have the service while the sub connection dosn't have
	TransCode          *string       `protobuf:"bytes,4,req,name=TransCode" json:"TransCode,omitempty"`
	TaxPercentage      *float64      `protobuf:"fixed64,5,opt,name=TaxPercentage" json:"TaxPercentage,omitempty"`
	DiscountPercentage *float64      `protobuf:"fixed64,6,opt,name=DiscountPercentage" json:"DiscountPercentage,omitempty"`
}

func (x *ServiceTariff) Reset() {
	*x = ServiceTariff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceTariff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTariff) ProtoMessage() {}

func (x *ServiceTariff) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTariff.ProtoReflect.Descriptor instead.
func (*ServiceTariff) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceTariff) GetServiceType() SERVICE_TYPE {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return SERVICE_TYPE_WATER
}

func (x *ServiceTariff) GetTariffCode() string {
	if x != nil && x.TariffCode != nil {
		return *x.TariffCode
	}
	return ""
}

func (x *ServiceTariff) GetIsZeroTarif() bool {
	if x != nil && x.IsZeroTarif != nil {
		return *x.IsZeroTarif
	}
	return false
}

func (x *ServiceTariff) GetTransCode() string {
	if x != nil && x.TransCode != nil {
		return *x.TransCode
	}
	return ""
}

func (x *ServiceTariff) GetTaxPercentage() float64 {
	if x != nil && x.TaxPercentage != nil {
		return *x.TaxPercentage
	}
	return 0
}

func (x *ServiceTariff) GetDiscountPercentage() float64 {
	if x != nil && x.DiscountPercentage != nil {
		return *x.DiscountPercentage
	}
	return 0
}

type Ctg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CType            *string          `protobuf:"bytes,1,req,name=CType" json:"CType,omitempty"`
	CTypeGroupid     *string          `protobuf:"bytes,2,opt,name=CTypeGroupid" json:"CTypeGroupid,omitempty"`
	Tariffs          []*ServiceTariff `protobuf:"bytes,3,rep,name=Tariffs" json:"Tariffs,omitempty"`
	OP_ESTIM_CONS    *float64         `protobuf:"fixed64,4,opt,name=OP_ESTIM_CONS,json=OPESTIMCONS" json:"OP_ESTIM_CONS,omitempty"`
	NOOP_ESTIM_CONS  *float64         `protobuf:"fixed64,5,opt,name=NOOP_ESTIM_CONS,json=NOOPESTIMCONS" json:"NOOP_ESTIM_CONS,omitempty"`
	Description      *string          `protobuf:"bytes,6,req,name=Description" json:"Description,omitempty"`
	GroupDescription *string          `protobuf:"bytes,7,opt,name=GroupDescription" json:"GroupDescription,omitempty"`
	Weigth           *float64         `protobuf:"fixed64,8,opt,name=Weigth" json:"Weigth,omitempty"`
}

func (x *Ctg) Reset() {
	*x = Ctg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ctg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ctg) ProtoMessage() {}

func (x *Ctg) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ctg.ProtoReflect.Descriptor instead.
func (*Ctg) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *Ctg) GetCType() string {
	if x != nil && x.CType != nil {
		return *x.CType
	}
	return ""
}

func (x *Ctg) GetCTypeGroupid() string {
	if x != nil && x.CTypeGroupid != nil {
		return *x.CTypeGroupid
	}
	return ""
}

func (x *Ctg) GetTariffs() []*ServiceTariff {
	if x != nil {
		return x.Tariffs
	}
	return nil
}

func (x *Ctg) GetOP_ESTIM_CONS() float64 {
	if x != nil && x.OP_ESTIM_CONS != nil {
		return *x.OP_ESTIM_CONS
	}
	return 0
}

func (x *Ctg) GetNOOP_ESTIM_CONS() float64 {
	if x != nil && x.NOOP_ESTIM_CONS != nil {
		return *x.NOOP_ESTIM_CONS
	}
	return 0
}

func (x *Ctg) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Ctg) GetGroupDescription() string {
	if x != nil && x.GroupDescription != nil {
		return *x.GroupDescription
	}
	return ""
}

func (x *Ctg) GetWeigth() float64 {
	if x != nil && x.Weigth != nil {
		return *x.Weigth
	}
	return 0
}

type ExtraTariffFess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransCode      *string  `protobuf:"bytes,1,req,name=TransCode" json:"TransCode,omitempty"`
	Description    *string  `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	AmountPerMeter *float64 `protobuf:"fixed64,3,opt,name=AmountPerMeter" json:"AmountPerMeter,omitempty"`
	TaxPercentage  *float64 `protobuf:"fixed64,4,opt,name=TaxPercentage" json:"TaxPercentage,omitempty"`
	FixedAmount    *float64 `protobuf:"fixed64,5,opt,name=FixedAmount" json:"FixedAmount,omitempty"`
}

func (x *ExtraTariffFess) Reset() {
	*x = ExtraTariffFess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraTariffFess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraTariffFess) ProtoMessage() {}

func (x *ExtraTariffFess) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraTariffFess.ProtoReflect.Descriptor instead.
func (*ExtraTariffFess) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *ExtraTariffFess) GetTransCode() string {
	if x != nil && x.TransCode != nil {
		return *x.TransCode
	}
	return ""
}

func (x *ExtraTariffFess) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ExtraTariffFess) GetAmountPerMeter() float64 {
	if x != nil && x.AmountPerMeter != nil {
		return *x.AmountPerMeter
	}
	return 0
}

func (x *ExtraTariffFess) GetTaxPercentage() float64 {
	if x != nil && x.TaxPercentage != nil {
		return *x.TaxPercentage
	}
	return 0
}

func (x *ExtraTariffFess) GetFixedAmount() float64 {
	if x != nil && x.FixedAmount != nil {
		return *x.FixedAmount
	}
	return 0
}

type TariffBand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From     *float64 `protobuf:"fixed64,1,req,name=From" json:"From,omitempty"`
	To       *float64 `protobuf:"fixed64,2,req,name=To" json:"To,omitempty"`
	Constant *float64 `protobuf:"fixed64,3,req,name=Constant" json:"Constant,omitempty"`
	Charge   *float64 `protobuf:"fixed64,4,req,name=Charge" json:"Charge,omitempty"`
}

func (x *TariffBand) Reset() {
	*x = TariffBand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TariffBand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TariffBand) ProtoMessage() {}

func (x *TariffBand) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TariffBand.ProtoReflect.Descriptor instead.
func (*TariffBand) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *TariffBand) GetFrom() float64 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *TariffBand) GetTo() float64 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *TariffBand) GetConstant() float64 {
	if x != nil && x.Constant != nil {
		return *x.Constant
	}
	return 0
}

func (x *TariffBand) GetCharge() float64 {
	if x != nil && x.Charge != nil {
		return *x.Charge
	}
	return 0
}

type Tariff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TariffCode *string `protobuf:"bytes,1,req,name=TariffCode" json:"TariffCode,omitempty"`
	//optional double DiscountPercentage=3;
	ExtraFees  []*ExtraTariffFess   `protobuf:"bytes,4,rep,name=ExtraFees" json:"ExtraFees,omitempty"`
	Bands      []*TariffBand        `protobuf:"bytes,5,rep,name=Bands" json:"Bands,omitempty"`
	EffectDate *timestamp.Timestamp `protobuf:"bytes,6,req,name=EffectDate" json:"EffectDate,omitempty"`
}

func (x *Tariff) Reset() {
	*x = Tariff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tariff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tariff) ProtoMessage() {}

func (x *Tariff) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tariff.ProtoReflect.Descriptor instead.
func (*Tariff) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *Tariff) GetTariffCode() string {
	if x != nil && x.TariffCode != nil {
		return *x.TariffCode
	}
	return ""
}

func (x *Tariff) GetExtraFees() []*ExtraTariffFess {
	if x != nil {
		return x.ExtraFees
	}
	return nil
}

func (x *Tariff) GetBands() []*TariffBand {
	if x != nil {
		return x.Bands
	}
	return nil
}

func (x *Tariff) GetEffectDate() *timestamp.Timestamp {
	if x != nil {
		return x.EffectDate
	}
	return nil
}

type EntityChargeMappedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  *float64 `protobuf:"fixed64,1,opt,name=From" json:"From,omitempty"`
	To    *float64 `protobuf:"fixed64,2,opt,name=To" json:"To,omitempty"`
	LuKey *string  `protobuf:"bytes,3,opt,name=LuKey" json:"LuKey,omitempty"`
	Value *float64 `protobuf:"fixed64,4,opt,name=Value" json:"Value,omitempty"`
}

func (x *EntityChargeMappedValue) Reset() {
	*x = EntityChargeMappedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityChargeMappedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityChargeMappedValue) ProtoMessage() {}

func (x *EntityChargeMappedValue) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityChargeMappedValue.ProtoReflect.Descriptor instead.
func (*EntityChargeMappedValue) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *EntityChargeMappedValue) GetFrom() float64 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *EntityChargeMappedValue) GetTo() float64 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *EntityChargeMappedValue) GetLuKey() string {
	if x != nil && x.LuKey != nil {
		return *x.LuKey
	}
	return ""
}

func (x *EntityChargeMappedValue) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type EntityEnableMappedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuKey *string `protobuf:"bytes,3,req,name=LuKey" json:"LuKey,omitempty"`
	Value *bool   `protobuf:"varint,4,opt,name=Value" json:"Value,omitempty"`
}

func (x *EntityEnableMappedValue) Reset() {
	*x = EntityEnableMappedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityEnableMappedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityEnableMappedValue) ProtoMessage() {}

func (x *EntityEnableMappedValue) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityEnableMappedValue.ProtoReflect.Descriptor instead.
func (*EntityEnableMappedValue) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *EntityEnableMappedValue) GetLuKey() string {
	if x != nil && x.LuKey != nil {
		return *x.LuKey
	}
	return ""
}

func (x *EntityEnableMappedValue) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type RegularChargeEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType   *ENTITY_TYPE               `protobuf:"varint,1,req,name=EntityType,enum=billing.ENTITY_TYPE" json:"EntityType,omitempty"`
	MappedValues []*EntityChargeMappedValue `protobuf:"bytes,2,rep,name=MappedValues" json:"MappedValues,omitempty"`
}

func (x *RegularChargeEntity) Reset() {
	*x = RegularChargeEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegularChargeEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularChargeEntity) ProtoMessage() {}

func (x *RegularChargeEntity) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularChargeEntity.ProtoReflect.Descriptor instead.
func (*RegularChargeEntity) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *RegularChargeEntity) GetEntityType() ENTITY_TYPE {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return ENTITY_TYPE_CTYPE
}

func (x *RegularChargeEntity) GetMappedValues() []*EntityChargeMappedValue {
	if x != nil {
		return x.MappedValues
	}
	return nil
}

type RegularEnableEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType   *ENTITY_TYPE               `protobuf:"varint,1,req,name=EntityType,enum=billing.ENTITY_TYPE" json:"EntityType,omitempty"`
	MappedValues []*EntityEnableMappedValue `protobuf:"bytes,2,rep,name=MappedValues" json:"MappedValues,omitempty"`
}

func (x *RegularEnableEntity) Reset() {
	*x = RegularEnableEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegularEnableEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularEnableEntity) ProtoMessage() {}

func (x *RegularEnableEntity) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularEnableEntity.ProtoReflect.Descriptor instead.
func (*RegularEnableEntity) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *RegularEnableEntity) GetEntityType() ENTITY_TYPE {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return ENTITY_TYPE_CTYPE
}

func (x *RegularEnableEntity) GetMappedValues() []*EntityEnableMappedValue {
	if x != nil {
		return x.MappedValues
	}
	return nil
}

type RegularCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegularChargeId      *string                    `protobuf:"bytes,1,req,name=RegularChargeId" json:"RegularChargeId,omitempty"`
	EffectDate           *timestamp.Timestamp       `protobuf:"bytes,2,req,name=EffectDate" json:"EffectDate,omitempty"`
	EffectDateTo         *timestamp.Timestamp       `protobuf:"bytes,3,opt,name=EffectDateTo" json:"EffectDateTo,omitempty"`
	TransCode            *string                    `protobuf:"bytes,4,req,name=TransCode" json:"TransCode,omitempty"`
	Title                *string                    `protobuf:"bytes,5,req,name=Title" json:"Title,omitempty"`
	IsChargable          *bool                      `protobuf:"varint,6,req,name=IsChargable" json:"IsChargable,omitempty"`
	ServiceType          *SERVICE_TYPE              `protobuf:"varint,8,req,name=ServiceType,enum=billing.SERVICE_TYPE" json:"ServiceType,omitempty"`
	ChargeCalcPeriod     *RegularChargePeriod       `protobuf:"varint,9,req,name=ChargeCalcPeriod,enum=billing.RegularChargePeriod" json:"ChargeCalcPeriod,omitempty"`
	ChargeInterval       *int64                     `protobuf:"varint,10,opt,name=ChargeInterval" json:"ChargeInterval,omitempty"`     //monthly interval
	ChargeMonthlyDay     *int64                     `protobuf:"varint,11,opt,name=ChargeMonthlyDay" json:"ChargeMonthlyDay,omitempty"` //day of the mounth
	ChargeType           *ChargeType                `protobuf:"varint,12,opt,name=ChargeType,enum=billing.ChargeType" json:"ChargeType,omitempty"`
	FixedCharge          *float64                   `protobuf:"fixed64,13,opt,name=FixedCharge" json:"FixedCharge,omitempty"`
	FixedChargeDiscount  *float64                   `protobuf:"fixed64,14,opt,name=FixedChargeDiscount" json:"FixedChargeDiscount,omitempty"`
	MinCharge            *float64                   `protobuf:"fixed64,15,opt,name=MinCharge" json:"MinCharge,omitempty"`
	VatPercentage        *float64                   `protobuf:"fixed64,16,opt,name=VatPercentage" json:"VatPercentage,omitempty"`
	RelationChargeEntity *RegularChargeEntity       `protobuf:"bytes,17,opt,name=RelationChargeEntity" json:"RelationChargeEntity,omitempty"`
	RelationEnableEntity *RegularEnableEntity       `protobuf:"bytes,18,opt,name=RelationEnableEntity" json:"RelationEnableEntity,omitempty"`
	Bypass               *bool                      `protobuf:"varint,19,opt,name=Bypass" json:"Bypass,omitempty"`
	CTypeCalcBase        *ChargeRegularCalcStrategy `protobuf:"varint,20,opt,name=CTypeCalcBase,enum=billing.ChargeRegularCalcStrategy" json:"CTypeCalcBase,omitempty"`
	PerUnit              *bool                      `protobuf:"varint,21,opt,name=PerUnit" json:"PerUnit,omitempty"`
}

func (x *RegularCharge) Reset() {
	*x = RegularCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegularCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularCharge) ProtoMessage() {}

func (x *RegularCharge) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularCharge.ProtoReflect.Descriptor instead.
func (*RegularCharge) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *RegularCharge) GetRegularChargeId() string {
	if x != nil && x.RegularChargeId != nil {
		return *x.RegularChargeId
	}
	return ""
}

func (x *RegularCharge) GetEffectDate() *timestamp.Timestamp {
	if x != nil {
		return x.EffectDate
	}
	return nil
}

func (x *RegularCharge) GetEffectDateTo() *timestamp.Timestamp {
	if x != nil {
		return x.EffectDateTo
	}
	return nil
}

func (x *RegularCharge) GetTransCode() string {
	if x != nil && x.TransCode != nil {
		return *x.TransCode
	}
	return ""
}

func (x *RegularCharge) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *RegularCharge) GetIsChargable() bool {
	if x != nil && x.IsChargable != nil {
		return *x.IsChargable
	}
	return false
}

func (x *RegularCharge) GetServiceType() SERVICE_TYPE {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return SERVICE_TYPE_WATER
}

func (x *RegularCharge) GetChargeCalcPeriod() RegularChargePeriod {
	if x != nil && x.ChargeCalcPeriod != nil {
		return *x.ChargeCalcPeriod
	}
	return RegularChargePeriod_BILL
}

func (x *RegularCharge) GetChargeInterval() int64 {
	if x != nil && x.ChargeInterval != nil {
		return *x.ChargeInterval
	}
	return 0
}

func (x *RegularCharge) GetChargeMonthlyDay() int64 {
	if x != nil && x.ChargeMonthlyDay != nil {
		return *x.ChargeMonthlyDay
	}
	return 0
}

func (x *RegularCharge) GetChargeType() ChargeType {
	if x != nil && x.ChargeType != nil {
		return *x.ChargeType
	}
	return ChargeType_FIXED
}

func (x *RegularCharge) GetFixedCharge() float64 {
	if x != nil && x.FixedCharge != nil {
		return *x.FixedCharge
	}
	return 0
}

func (x *RegularCharge) GetFixedChargeDiscount() float64 {
	if x != nil && x.FixedChargeDiscount != nil {
		return *x.FixedChargeDiscount
	}
	return 0
}

func (x *RegularCharge) GetMinCharge() float64 {
	if x != nil && x.MinCharge != nil {
		return *x.MinCharge
	}
	return 0
}

func (x *RegularCharge) GetVatPercentage() float64 {
	if x != nil && x.VatPercentage != nil {
		return *x.VatPercentage
	}
	return 0
}

func (x *RegularCharge) GetRelationChargeEntity() *RegularChargeEntity {
	if x != nil {
		return x.RelationChargeEntity
	}
	return nil
}

func (x *RegularCharge) GetRelationEnableEntity() *RegularEnableEntity {
	if x != nil {
		return x.RelationEnableEntity
	}
	return nil
}

func (x *RegularCharge) GetBypass() bool {
	if x != nil && x.Bypass != nil {
		return *x.Bypass
	}
	return false
}

func (x *RegularCharge) GetCTypeCalcBase() ChargeRegularCalcStrategy {
	if x != nil && x.CTypeCalcBase != nil {
		return *x.CTypeCalcBase
	}
	return ChargeRegularCalcStrategy_EACH_ONE
}

func (x *RegularCharge) GetPerUnit() bool {
	if x != nil && x.PerUnit != nil {
		return *x.PerUnit
	}
	return false
}

type RegularChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegularCharge []*RegularCharge `protobuf:"bytes,1,rep,name=RegularCharge" json:"RegularCharge,omitempty"`
}

func (x *RegularChargeRequest) Reset() {
	*x = RegularChargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegularChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularChargeRequest) ProtoMessage() {}

func (x *RegularChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularChargeRequest.ProtoReflect.Descriptor instead.
func (*RegularChargeRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *RegularChargeRequest) GetRegularCharge() []*RegularCharge {
	if x != nil {
		return x.RegularCharge
	}
	return nil
}

///////Service///////////////
type TransCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        *string `protobuf:"bytes,1,req,name=Code" json:"Code,omitempty"`
	Description *string `protobuf:"bytes,2,req,name=Description" json:"Description,omitempty"`
	EdamsCode   *int64  `protobuf:"varint,3,opt,name=EdamsCode" json:"EdamsCode,omitempty"`
	EdamsSCode  *int64  `protobuf:"varint,4,opt,name=EdamsSCode" json:"EdamsSCode,omitempty"`
}

func (x *TransCode) Reset() {
	*x = TransCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransCode) ProtoMessage() {}

func (x *TransCode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransCode.ProtoReflect.Descriptor instead.
func (*TransCode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *TransCode) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *TransCode) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TransCode) GetEdamsCode() int64 {
	if x != nil && x.EdamsCode != nil {
		return *x.EdamsCode
	}
	return 0
}

func (x *TransCode) GetEdamsSCode() int64 {
	if x != nil && x.EdamsSCode != nil {
		return *x.EdamsSCode
	}
	return 0
}

type ServiceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SType        *SERVICE_TYPE `protobuf:"varint,8,req,name=SType,enum=billing.SERVICE_TYPE" json:"SType,omitempty"`
	Description  *string       `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	IsSelectable *bool         `protobuf:"varint,4,opt,name=IsSelectable" json:"IsSelectable,omitempty"`
	IsBasic      *bool         `protobuf:"varint,5,opt,name=IsBasic" json:"IsBasic,omitempty"`
}

func (x *ServiceType) Reset() {
	*x = ServiceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceType) ProtoMessage() {}

func (x *ServiceType) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceType.ProtoReflect.Descriptor instead.
func (*ServiceType) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

func (x *ServiceType) GetSType() SERVICE_TYPE {
	if x != nil && x.SType != nil {
		return *x.SType
	}
	return SERVICE_TYPE_WATER
}

func (x *ServiceType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ServiceType) GetIsSelectable() bool {
	if x != nil && x.IsSelectable != nil {
		return *x.IsSelectable
	}
	return false
}

func (x *ServiceType) GetIsBasic() bool {
	if x != nil && x.IsBasic != nil {
		return *x.IsBasic
	}
	return false
}

type ServiceTypeRepsonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SType *SERVICE_TYPE `protobuf:"varint,8,req,name=SType,enum=billing.SERVICE_TYPE" json:"SType,omitempty"`
}

func (x *ServiceTypeRepsonce) Reset() {
	*x = ServiceTypeRepsonce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceTypeRepsonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceTypeRepsonce) ProtoMessage() {}

func (x *ServiceTypeRepsonce) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceTypeRepsonce.ProtoReflect.Descriptor instead.
func (*ServiceTypeRepsonce) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *ServiceTypeRepsonce) GetSType() SERVICE_TYPE {
	if x != nil && x.SType != nil {
		return *x.SType
	}
	return SERVICE_TYPE_WATER
}

// each billing request should have the customer entity and the reading for each service
type ChargeSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CycleLength      *int64               `protobuf:"varint,2,req,name=CycleLength" json:"CycleLength,omitempty"`
	BilingDate       *timestamp.Timestamp `protobuf:"bytes,3,req,name=BilingDate" json:"BilingDate,omitempty"`
	IgnoreTimeEffect *bool                `protobuf:"varint,4,opt,name=IgnoreTimeEffect" json:"IgnoreTimeEffect,omitempty"`
	PaymentNo        *string              `protobuf:"bytes,5,opt,name=PaymentNo" json:"PaymentNo,omitempty"`
}

func (x *ChargeSetting) Reset() {
	*x = ChargeSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeSetting) ProtoMessage() {}

func (x *ChargeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeSetting.ProtoReflect.Descriptor instead.
func (*ChargeSetting) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

func (x *ChargeSetting) GetCycleLength() int64 {
	if x != nil && x.CycleLength != nil {
		return *x.CycleLength
	}
	return 0
}

func (x *ChargeSetting) GetBilingDate() *timestamp.Timestamp {
	if x != nil {
		return x.BilingDate
	}
	return nil
}

func (x *ChargeSetting) GetIgnoreTimeEffect() bool {
	if x != nil && x.IgnoreTimeEffect != nil {
		return *x.IgnoreTimeEffect
	}
	return false
}

func (x *ChargeSetting) GetPaymentNo() string {
	if x != nil && x.PaymentNo != nil {
		return *x.PaymentNo
	}
	return ""
}

//is overall all actual or estim consumption for each service
type SubConnectionReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctype        *Ctg     `protobuf:"bytes,1,req,name=Ctype" json:"Ctype,omitempty"`
	NoUnits      *int64   `protobuf:"varint,2,req,name=NoUnits" json:"NoUnits,omitempty"`
	Percentage   *float64 `protobuf:"fixed64,3,req,name=Percentage" json:"Percentage,omitempty"`
	EstimConsump *float64 `protobuf:"fixed64,4,req,name=EstimConsump" json:"EstimConsump,omitempty"`
}

func (x *SubConnectionReading) Reset() {
	*x = SubConnectionReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubConnectionReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubConnectionReading) ProtoMessage() {}

func (x *SubConnectionReading) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubConnectionReading.ProtoReflect.Descriptor instead.
func (*SubConnectionReading) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22}
}

func (x *SubConnectionReading) GetCtype() *Ctg {
	if x != nil {
		return x.Ctype
	}
	return nil
}

func (x *SubConnectionReading) GetNoUnits() int64 {
	if x != nil && x.NoUnits != nil {
		return *x.NoUnits
	}
	return 0
}

func (x *SubConnectionReading) GetPercentage() float64 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

func (x *SubConnectionReading) GetEstimConsump() float64 {
	if x != nil && x.EstimConsump != nil {
		return *x.EstimConsump
	}
	return 0
}

type Reading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consump   *float64             `protobuf:"fixed64,1,opt,name=Consump" json:"Consump,omitempty"`
	PrReading *float64             `protobuf:"fixed64,2,opt,name=PrReading" json:"PrReading,omitempty"`
	CrReading *float64             `protobuf:"fixed64,3,opt,name=CrReading" json:"CrReading,omitempty"`
	PrDate    *timestamp.Timestamp `protobuf:"bytes,4,opt,name=PrDate" json:"PrDate,omitempty"`
	CrDate    *timestamp.Timestamp `protobuf:"bytes,5,opt,name=CrDate" json:"CrDate,omitempty"`
	ReadType  *READING_TYPE        `protobuf:"varint,6,opt,name=ReadType,enum=billing.READING_TYPE" json:"ReadType,omitempty"`
	ReadingBy *string              `protobuf:"bytes,7,opt,name=ReadingBy" json:"ReadingBy,omitempty"`
}

func (x *Reading) Reset() {
	*x = Reading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reading) ProtoMessage() {}

func (x *Reading) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reading.ProtoReflect.Descriptor instead.
func (*Reading) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{23}
}

func (x *Reading) GetConsump() float64 {
	if x != nil && x.Consump != nil {
		return *x.Consump
	}
	return 0
}

func (x *Reading) GetPrReading() float64 {
	if x != nil && x.PrReading != nil {
		return *x.PrReading
	}
	return 0
}

func (x *Reading) GetCrReading() float64 {
	if x != nil && x.CrReading != nil {
		return *x.CrReading
	}
	return 0
}

func (x *Reading) GetPrDate() *timestamp.Timestamp {
	if x != nil {
		return x.PrDate
	}
	return nil
}

func (x *Reading) GetCrDate() *timestamp.Timestamp {
	if x != nil {
		return x.CrDate
	}
	return nil
}

func (x *Reading) GetReadType() READING_TYPE {
	if x != nil && x.ReadType != nil {
		return *x.ReadType
	}
	return READING_TYPE_ACTUAL
}

func (x *Reading) GetReadingBy() string {
	if x != nil && x.ReadingBy != nil {
		return *x.ReadingBy
	}
	return ""
}

//each service may be has its meter (server meters,fire meters,electrcity meters)
type ServiceReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType *SERVICE_TYPE `protobuf:"varint,1,req,name=ServiceType,enum=billing.SERVICE_TYPE" json:"ServiceType,omitempty"`
	Reading     *Reading      `protobuf:"bytes,2,req,name=Reading" json:"Reading,omitempty"`
}

func (x *ServiceReading) Reset() {
	*x = ServiceReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceReading) ProtoMessage() {}

func (x *ServiceReading) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceReading.ProtoReflect.Descriptor instead.
func (*ServiceReading) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{24}
}

func (x *ServiceReading) GetServiceType() SERVICE_TYPE {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return SERVICE_TYPE_WATER
}

func (x *ServiceReading) GetReading() *Reading {
	if x != nil {
		return x.Reading
	}
	return nil
}

type ChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customer         *Customer         `protobuf:"bytes,1,req,name=Customer" json:"Customer,omitempty"`
	ServicesReadings []*ServiceReading `protobuf:"bytes,2,rep,name=ServicesReadings" json:"ServicesReadings,omitempty"`
	Setting          *ChargeSetting    `protobuf:"bytes,3,req,name=Setting" json:"Setting,omitempty"`
	Services         []SERVICE_TYPE    `protobuf:"varint,4,rep,name=Services,enum=billing.SERVICE_TYPE" json:"Services,omitempty"`
	OldBill          *Bill             `protobuf:"bytes,6,opt,name=OldBill" json:"OldBill,omitempty"`
}

func (x *ChargeRequest) Reset() {
	*x = ChargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeRequest) ProtoMessage() {}

func (x *ChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeRequest.ProtoReflect.Descriptor instead.
func (*ChargeRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{25}
}

func (x *ChargeRequest) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *ChargeRequest) GetServicesReadings() []*ServiceReading {
	if x != nil {
		return x.ServicesReadings
	}
	return nil
}

func (x *ChargeRequest) GetSetting() *ChargeSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *ChargeRequest) GetServices() []SERVICE_TYPE {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ChargeRequest) GetOldBill() *Bill {
	if x != nil {
		return x.OldBill
	}
	return nil
}

//
//the expected responce is the amount for each service
type ExtraCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DESCRIPTION *string  `protobuf:"bytes,1,opt,name=DESCRIPTION" json:"DESCRIPTION,omitempty"`
	Code        *string  `protobuf:"bytes,2,req,name=Code" json:"Code,omitempty"`
	Amount      *float64 `protobuf:"fixed64,3,req,name=Amount" json:"Amount,omitempty"`
}

func (x *ExtraCharge) Reset() {
	*x = ExtraCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraCharge) ProtoMessage() {}

func (x *ExtraCharge) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraCharge.ProtoReflect.Descriptor instead.
func (*ExtraCharge) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{26}
}

func (x *ExtraCharge) GetDESCRIPTION() string {
	if x != nil && x.DESCRIPTION != nil {
		return *x.DESCRIPTION
	}
	return ""
}

func (x *ExtraCharge) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *ExtraCharge) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type MeasuredTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consump   *float64      `protobuf:"fixed64,1,req,name=Consump" json:"Consump,omitempty"`
	CrReading *float64      `protobuf:"fixed64,2,opt,name=CrReading" json:"CrReading,omitempty"`
	PrReading *float64      `protobuf:"fixed64,3,opt,name=PrReading" json:"PrReading,omitempty"`
	ReadType  *READING_TYPE `protobuf:"varint,4,req,name=ReadType,enum=billing.READING_TYPE" json:"ReadType,omitempty"`
	MeterType *string       `protobuf:"bytes,5,opt,name=MeterType" json:"MeterType,omitempty"`
	MeterRef  *string       `protobuf:"bytes,6,opt,name=MeterRef" json:"MeterRef,omitempty"`
}

func (x *MeasuredTransaction) Reset() {
	*x = MeasuredTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasuredTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasuredTransaction) ProtoMessage() {}

func (x *MeasuredTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasuredTransaction.ProtoReflect.Descriptor instead.
func (*MeasuredTransaction) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{27}
}

func (x *MeasuredTransaction) GetConsump() float64 {
	if x != nil && x.Consump != nil {
		return *x.Consump
	}
	return 0
}

func (x *MeasuredTransaction) GetCrReading() float64 {
	if x != nil && x.CrReading != nil {
		return *x.CrReading
	}
	return 0
}

func (x *MeasuredTransaction) GetPrReading() float64 {
	if x != nil && x.PrReading != nil {
		return *x.PrReading
	}
	return 0
}

func (x *MeasuredTransaction) GetReadType() READING_TYPE {
	if x != nil && x.ReadType != nil {
		return *x.ReadType
	}
	return READING_TYPE_ACTUAL
}

func (x *MeasuredTransaction) GetMeterType() string {
	if x != nil && x.MeterType != nil {
		return *x.MeterType
	}
	return ""
}

func (x *MeasuredTransaction) GetMeterRef() string {
	if x != nil && x.MeterRef != nil {
		return *x.MeterRef
	}
	return ""
}

type FinantialTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceType           *SERVICE_TYPE        `protobuf:"varint,1,req,name=ServiceType,enum=billing.SERVICE_TYPE" json:"ServiceType,omitempty"`
	Code                  *string              `protobuf:"bytes,2,req,name=Code" json:"Code,omitempty"`
	BilngDate             *timestamp.Timestamp `protobuf:"bytes,3,req,name=BilngDate" json:"BilngDate,omitempty"`
	EffDate               *timestamp.Timestamp `protobuf:"bytes,4,req,name=EffDate" json:"EffDate,omitempty"`
	Amount                *float64             `protobuf:"fixed64,5,req,name=Amount" json:"Amount,omitempty"`
	TaxAmount             *float64             `protobuf:"fixed64,6,opt,name=TaxAmount" json:"TaxAmount,omitempty"`
	DiscountAmount        *float64             `protobuf:"fixed64,7,opt,name=DiscountAmount" json:"DiscountAmount,omitempty"`
	Ctype                 *Ctg                 `protobuf:"bytes,8,opt,name=Ctype" json:"Ctype,omitempty"`
	NoUnits               *int64               `protobuf:"varint,9,opt,name=NoUnits" json:"NoUnits,omitempty"`
	PropRef               *string              `protobuf:"bytes,10,opt,name=PropRef" json:"PropRef,omitempty"`
	MTransaction          *MeasuredTransaction `protobuf:"bytes,11,opt,name=MTransaction" json:"MTransaction,omitempty"`
	Description           *string              `protobuf:"bytes,12,opt,name=Description" json:"Description,omitempty"`
	ConsumptionPercentage *float64             `protobuf:"fixed64,13,opt,name=ConsumptionPercentage" json:"ConsumptionPercentage,omitempty"`
	TariffId              *string              `protobuf:"bytes,14,opt,name=TariffId" json:"TariffId,omitempty"`
	Editable              *bool                `protobuf:"varint,15,opt,name=Editable" json:"Editable,omitempty"`
}

func (x *FinantialTransaction) Reset() {
	*x = FinantialTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinantialTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinantialTransaction) ProtoMessage() {}

func (x *FinantialTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinantialTransaction.ProtoReflect.Descriptor instead.
func (*FinantialTransaction) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28}
}

func (x *FinantialTransaction) GetServiceType() SERVICE_TYPE {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return SERVICE_TYPE_WATER
}

func (x *FinantialTransaction) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *FinantialTransaction) GetBilngDate() *timestamp.Timestamp {
	if x != nil {
		return x.BilngDate
	}
	return nil
}

func (x *FinantialTransaction) GetEffDate() *timestamp.Timestamp {
	if x != nil {
		return x.EffDate
	}
	return nil
}

func (x *FinantialTransaction) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *FinantialTransaction) GetTaxAmount() float64 {
	if x != nil && x.TaxAmount != nil {
		return *x.TaxAmount
	}
	return 0
}

func (x *FinantialTransaction) GetDiscountAmount() float64 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *FinantialTransaction) GetCtype() *Ctg {
	if x != nil {
		return x.Ctype
	}
	return nil
}

func (x *FinantialTransaction) GetNoUnits() int64 {
	if x != nil && x.NoUnits != nil {
		return *x.NoUnits
	}
	return 0
}

func (x *FinantialTransaction) GetPropRef() string {
	if x != nil && x.PropRef != nil {
		return *x.PropRef
	}
	return ""
}

func (x *FinantialTransaction) GetMTransaction() *MeasuredTransaction {
	if x != nil {
		return x.MTransaction
	}
	return nil
}

func (x *FinantialTransaction) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FinantialTransaction) GetConsumptionPercentage() float64 {
	if x != nil && x.ConsumptionPercentage != nil {
		return *x.ConsumptionPercentage
	}
	return 0
}

func (x *FinantialTransaction) GetTariffId() string {
	if x != nil && x.TariffId != nil {
		return *x.TariffId
	}
	return ""
}

func (x *FinantialTransaction) GetEditable() bool {
	if x != nil && x.Editable != nil {
		return *x.Editable
	}
	return false
}

type Bill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentNo        *string                 `protobuf:"bytes,1,req,name=PaymentNo" json:"PaymentNo,omitempty"`
	BilngDate        *timestamp.Timestamp    `protobuf:"bytes,2,req,name=BilngDate" json:"BilngDate,omitempty"`
	FTransactions    []*FinantialTransaction `protobuf:"bytes,3,rep,name=FTransactions" json:"FTransactions,omitempty"`
	ServicesReadings []*ServiceReading       `protobuf:"bytes,4,rep,name=ServicesReadings" json:"ServicesReadings,omitempty"`
	Customer         *Customer               `protobuf:"bytes,7,req,name=Customer" json:"Customer,omitempty"`
	ClBalance        *float32                `protobuf:"fixed32,8,opt,name=ClBalance" json:"ClBalance,omitempty"`
	Comment          *string                 `protobuf:"bytes,9,opt,name=Comment" json:"Comment,omitempty"`
}

func (x *Bill) Reset() {
	*x = Bill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bill) ProtoMessage() {}

func (x *Bill) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bill.ProtoReflect.Descriptor instead.
func (*Bill) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29}
}

func (x *Bill) GetPaymentNo() string {
	if x != nil && x.PaymentNo != nil {
		return *x.PaymentNo
	}
	return ""
}

func (x *Bill) GetBilngDate() *timestamp.Timestamp {
	if x != nil {
		return x.BilngDate
	}
	return nil
}

func (x *Bill) GetFTransactions() []*FinantialTransaction {
	if x != nil {
		return x.FTransactions
	}
	return nil
}

func (x *Bill) GetServicesReadings() []*ServiceReading {
	if x != nil {
		return x.ServicesReadings
	}
	return nil
}

func (x *Bill) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *Bill) GetClBalance() float32 {
	if x != nil && x.ClBalance != nil {
		return *x.ClBalance
	}
	return 0
}

func (x *Bill) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type CancelledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormNo   *int64               `protobuf:"varint,1,req,name=FormNo" json:"FormNo,omitempty"`
	FormDate *timestamp.Timestamp `protobuf:"bytes,2,opt,name=FormDate" json:"FormDate,omitempty"`
	Status   *string              `protobuf:"bytes,3,opt,name=Status" json:"Status,omitempty"`
	Comment  *string              `protobuf:"bytes,4,opt,name=Comment" json:"Comment,omitempty"`
}

func (x *CancelledRequest) Reset() {
	*x = CancelledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelledRequest) ProtoMessage() {}

func (x *CancelledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelledRequest.ProtoReflect.Descriptor instead.
func (*CancelledRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30}
}

func (x *CancelledRequest) GetFormNo() int64 {
	if x != nil && x.FormNo != nil {
		return *x.FormNo
	}
	return 0
}

func (x *CancelledRequest) GetFormDate() *timestamp.Timestamp {
	if x != nil {
		return x.FormDate
	}
	return nil
}

func (x *CancelledRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *CancelledRequest) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type BillResponce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bills      []*Bill           `protobuf:"bytes,1,rep,name=Bills" json:"Bills,omitempty"`
	RecalcForm *CancelledRequest `protobuf:"bytes,2,opt,name=RecalcForm" json:"RecalcForm,omitempty"`
}

func (x *BillResponce) Reset() {
	*x = BillResponce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillResponce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillResponce) ProtoMessage() {}

func (x *BillResponce) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillResponce.ProtoReflect.Descriptor instead.
func (*BillResponce) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31}
}

func (x *BillResponce) GetBills() []*Bill {
	if x != nil {
		return x.Bills
	}
	return nil
}

func (x *BillResponce) GetRecalcForm() *CancelledRequest {
	if x != nil {
		return x.RecalcForm
	}
	return nil
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	Version *string `protobuf:"bytes,2,req,name=Version" json:"Version,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{32}
}

func (x *ServiceInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ServiceInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type SetupData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tariffs        []*Tariff        `protobuf:"bytes,1,rep,name=Tariffs" json:"Tariffs,omitempty"`
	Ctgs           []*Ctg           `protobuf:"bytes,2,rep,name=Ctgs" json:"Ctgs,omitempty"`
	RegularCharges []*RegularCharge `protobuf:"bytes,3,rep,name=RegularCharges" json:"RegularCharges,omitempty"`
	TransCodes     []*TransCode     `protobuf:"bytes,4,rep,name=TransCodes" json:"TransCodes,omitempty"`
}

func (x *SetupData) Reset() {
	*x = SetupData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupData) ProtoMessage() {}

func (x *SetupData) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupData.ProtoReflect.Descriptor instead.
func (*SetupData) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{33}
}

func (x *SetupData) GetTariffs() []*Tariff {
	if x != nil {
		return x.Tariffs
	}
	return nil
}

func (x *SetupData) GetCtgs() []*Ctg {
	if x != nil {
		return x.Ctgs
	}
	return nil
}

func (x *SetupData) GetRegularCharges() []*RegularCharge {
	if x != nil {
		return x.RegularCharges
	}
	return nil
}

func (x *SetupData) GetTransCodes() []*TransCode {
	if x != nil {
		return x.TransCodes
	}
	return nil
}

type CustomersList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customers []*Customer `protobuf:"bytes,1,rep,name=Customers" json:"Customers,omitempty"`
}

func (x *CustomersList) Reset() {
	*x = CustomersList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomersList) ProtoMessage() {}

func (x *CustomersList) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomersList.ProtoReflect.Descriptor instead.
func (*CustomersList) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{34}
}

func (x *CustomersList) GetCustomers() []*Customer {
	if x != nil {
		return x.Customers
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       *string              `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	BilngDate *timestamp.Timestamp `protobuf:"bytes,2,req,name=BilngDate" json:"BilngDate,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{35}
}

func (x *Key) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Key) GetBilngDate() *timestamp.Timestamp {
	if x != nil {
		return x.BilngDate
	}
	return nil
}

type LookUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        *string `protobuf:"bytes,1,req,name=Code" json:"Code,omitempty"`
	Description *string `protobuf:"bytes,2,req,name=Description" json:"Description,omitempty"`
}

func (x *LookUp) Reset() {
	*x = LookUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUp) ProtoMessage() {}

func (x *LookUp) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUp.ProtoReflect.Descriptor instead.
func (*LookUp) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36}
}

func (x *LookUp) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *LookUp) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type LookUpsResponce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LookUps []*LookUp `protobuf:"bytes,1,rep,name=LookUps" json:"LookUps,omitempty"`
}

func (x *LookUpsResponce) Reset() {
	*x = LookUpsResponce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpsResponce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpsResponce) ProtoMessage() {}

func (x *LookUpsResponce) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpsResponce.ProtoReflect.Descriptor instead.
func (*LookUpsResponce) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{37}
}

func (x *LookUpsResponce) GetLookUps() []*LookUp {
	if x != nil {
		return x.LookUps
	}
	return nil
}

type CtgsResponce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctgs []*Ctg `protobuf:"bytes,1,rep,name=Ctgs" json:"Ctgs,omitempty"`
}

func (x *CtgsResponce) Reset() {
	*x = CtgsResponce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtgsResponce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtgsResponce) ProtoMessage() {}

func (x *CtgsResponce) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtgsResponce.ProtoReflect.Descriptor instead.
func (*CtgsResponce) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{38}
}

func (x *CtgsResponce) GetCtgs() []*Ctg {
	if x != nil {
		return x.Ctgs
	}
	return nil
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType *ENTITY_TYPE `protobuf:"varint,1,req,name=EntityType,enum=billing.ENTITY_TYPE" json:"EntityType,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{39}
}

func (x *Entity) GetEntityType() ENTITY_TYPE {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return ENTITY_TYPE_CTYPE
}

type GetBillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custkey       *string              `protobuf:"bytes,1,req,name=Custkey" json:"Custkey,omitempty"`
	PaymentNo     *string              `protobuf:"bytes,2,opt,name=PaymentNo" json:"PaymentNo,omitempty"`
	BilngDateFrom *timestamp.Timestamp `protobuf:"bytes,3,opt,name=BilngDateFrom" json:"BilngDateFrom,omitempty"`
	BilngDateTo   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=BilngDateTo" json:"BilngDateTo,omitempty"`
	FormNo        *string              `protobuf:"bytes,5,opt,name=FormNo" json:"FormNo,omitempty"`
}

func (x *GetBillRequest) Reset() {
	*x = GetBillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBillRequest) ProtoMessage() {}

func (x *GetBillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBillRequest.ProtoReflect.Descriptor instead.
func (*GetBillRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{40}
}

func (x *GetBillRequest) GetCustkey() string {
	if x != nil && x.Custkey != nil {
		return *x.Custkey
	}
	return ""
}

func (x *GetBillRequest) GetPaymentNo() string {
	if x != nil && x.PaymentNo != nil {
		return *x.PaymentNo
	}
	return ""
}

func (x *GetBillRequest) GetBilngDateFrom() *timestamp.Timestamp {
	if x != nil {
		return x.BilngDateFrom
	}
	return nil
}

func (x *GetBillRequest) GetBilngDateTo() *timestamp.Timestamp {
	if x != nil {
		return x.BilngDateTo
	}
	return nil
}

func (x *GetBillRequest) GetFormNo() string {
	if x != nil && x.FormNo != nil {
		return *x.FormNo
	}
	return ""
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *string `protobuf:"bytes,1,req,name=Username" json:"Username,omitempty"`
	Password *string `protobuf:"bytes,2,req,name=Password" json:"Password,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{41}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type LoginResponce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
	Succssed *bool   `protobuf:"varint,2,opt,name=Succssed" json:"Succssed,omitempty"`
}

func (x *LoginResponce) Reset() {
	*x = LoginResponce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponce) ProtoMessage() {}

func (x *LoginResponce) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponce.ProtoReflect.Descriptor instead.
func (*LoginResponce) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{42}
}

func (x *LoginResponce) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *LoginResponce) GetSuccssed() bool {
	if x != nil && x.Succssed != nil {
		return *x.Succssed
	}
	return false
}

type PostMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data                   *BillResponce `protobuf:"bytes,1,req,name=Data" json:"Data,omitempty"`
	IsCancelledRequest     *bool         `protobuf:"varint,2,opt,name=IsCancelledRequest" json:"IsCancelledRequest,omitempty"`
	CancelledRequestFormNo *int64        `protobuf:"varint,3,opt,name=CancelledRequestFormNo" json:"CancelledRequestFormNo,omitempty"`
}

func (x *PostMessage) Reset() {
	*x = PostMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostMessage) ProtoMessage() {}

func (x *PostMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostMessage.ProtoReflect.Descriptor instead.
func (*PostMessage) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{43}
}

func (x *PostMessage) GetData() *BillResponce {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PostMessage) GetIsCancelledRequest() bool {
	if x != nil && x.IsCancelledRequest != nil {
		return *x.IsCancelledRequest
	}
	return false
}

func (x *PostMessage) GetCancelledRequestFormNo() int64 {
	if x != nil && x.CancelledRequestFormNo != nil {
		return *x.CancelledRequestFormNo
	}
	return 0
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x05, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x08,
	0x4f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x4f,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x43, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x74, 0x67, 0x52, 0x05, 0x43, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x6f, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x42, 0x75, 0x6c,
	0x6b, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x44, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f,
	0x6e, 0x6e, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x12, 0x4b,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x53,
	0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x53, 0x75, 0x62,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x05, 0x43, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x74, 0x67, 0x52, 0x05, 0x43, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x6f, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x02, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x70, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x70,
	0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67,
	0x31, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x32, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x33, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x33, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x52,
	0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x6f, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x56, 0x61, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x56, 0x61, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x77, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x6f, 0x77, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0xc1, 0x02, 0x0a, 0x08,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x73, 0x74,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x43, 0x75, 0x73, 0x74, 0x6b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e,
	0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x6c, 0x61, 0x67, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6c, 0x61, 0x67, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c,
	0x61, 0x67, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x6c, 0x61, 0x67, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61, 0x67,
	0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6c, 0x61,
	0x67, 0x35, 0x12, 0x2d, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x6c, 0x6c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x42, 0x69, 0x6c, 0x6c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0xfe, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x12, 0x37, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x54, 0x61, 0x72, 0x69, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x49, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x54, 0x61, 0x72, 0x69, 0x66, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61,
	0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x54, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x22, 0xa3, 0x02, 0x0a, 0x03, 0x43, 0x74, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x43, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x07, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x4f, 0x50, 0x5f, 0x45, 0x53, 0x54, 0x49, 0x4d,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4f, 0x50, 0x45,
	0x53, 0x54, 0x49, 0x4d, 0x43, 0x4f, 0x4e, 0x53, 0x12, 0x26, 0x0a, 0x0f, 0x4e, 0x4f, 0x4f, 0x50,
	0x5f, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x4e, 0x4f, 0x4f, 0x50, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x43, 0x4f, 0x4e, 0x53,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x57, 0x65, 0x69, 0x67, 0x74, 0x68, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x46, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x54, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x0a, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x54, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x08,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x01, 0x52, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x22, 0xc7, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x46, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x66, 0x46, 0x65, 0x73, 0x73, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46,
	0x65, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x72,
	0x69, 0x66, 0x66, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x3a,
	0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x69, 0x0a, 0x17, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x75, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x75, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x75, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x75, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x91, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44,
	0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xcf, 0x07, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0f, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x09, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x10, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x44, 0x61,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x44, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x56, 0x61, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x56, 0x61, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x42, 0x79, 0x70, 0x61,
	0x73, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x43, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x42,
	0x61, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x43, 0x61, 0x6c, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d, 0x43,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50,
	0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x54, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0d, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x0d, 0x52,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x45, 0x64, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x45, 0x64, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x64, 0x61, 0x6d, 0x73, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x45, 0x64, 0x61, 0x6d, 0x73, 0x53, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9a, 0x01,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x53, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x52, 0x05, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x49, 0x73, 0x42, 0x61, 0x73, 0x69, 0x63, 0x22, 0x42, 0x0a, 0x13, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x73, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x53, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x05, 0x53, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7,
	0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x42, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x62,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x22, 0x0a, 0x05, 0x43, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x74, 0x67, 0x52, 0x05,
	0x43, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0c, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x22, 0x98, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x50, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x50, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x43, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x43, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x52, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x52, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x22, 0x75,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x37, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x91, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a,
	0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x4f, 0x6c, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c,
	0x52, 0x07, 0x4f, 0x6c, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x22, 0x5b, 0x0a, 0x0b, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x45, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x22, 0xdb, 0x04, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x42, 0x69, 0x6c, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x42, 0x69, 0x6c, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x66, 0x66, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x45, 0x66, 0x66, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x43, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x74, 0x67, 0x52, 0x05, 0x43, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x6f, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x12, 0x40, 0x0a,
	0x0c, 0x4d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x4d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x72, 0x69, 0x66,
	0x66, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0xcf, 0x02, 0x0a, 0x04, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x42, 0x69, 0x6c, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x42, 0x69, 0x6c, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x0d, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x46, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x43, 0x6c,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x12, 0x36,
	0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x46, 0x6f,
	0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x42, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x52, 0x65,
	0x63, 0x61, 0x6c, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x61, 0x72, 0x69, 0x66, 0x66, 0x52, 0x07, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x73, 0x12, 0x20,
	0x0a, 0x04, 0x43, 0x74, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x74, 0x67, 0x52, 0x04, 0x43, 0x74, 0x67, 0x73,
	0x12, 0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x0e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x42, 0x69, 0x6c, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x42, 0x69, 0x6c, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3e, 0x0a, 0x06, 0x4c, 0x6f, 0x6f,
	0x6b, 0x55, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x0f, 0x4c, 0x6f, 0x6f,
	0x6b, 0x55, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x52, 0x07,
	0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x73, 0x22, 0x30, 0x0a, 0x0c, 0x43, 0x74, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x43, 0x74, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x74, 0x67, 0x52, 0x04, 0x43, 0x74, 0x67, 0x73, 0x22, 0x3e, 0x0a, 0x06, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x75, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x75, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x40, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x42, 0x69, 0x6c, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3c, 0x0a, 0x0b, 0x42, 0x69, 0x6c, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x42, 0x69, 0x6c, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x22, 0x46, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x41, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x75, 0x63, 0x63, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53,
	0x75, 0x63, 0x63, 0x73, 0x73, 0x65, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x49, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x2a, 0x1b, 0x0a, 0x06, 0x56, 0x45,
	0x52, 0x49, 0x4f, 0x4e, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x39, 0x2a, 0x34, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x4f, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x55, 0x0a,
	0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x09, 0x0a,
	0x05, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x57, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x49, 0x43, 0x49,
	0x54, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x41, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x48, 0x59, 0x44, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49,
	0x52, 0x45, 0x10, 0x05, 0x2a, 0x8c, 0x01, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x10, 0x03, 0x2a, 0x35, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x2c, 0x0a, 0x13, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x02, 0x2a, 0x97, 0x03, 0x0a, 0x0b, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x31, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x32, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x33, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x34, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x35, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x56, 0x41, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x31, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x32, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f,
	0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x33, 0x10, 0x0c, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x34, 0x10,
	0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x35, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x57, 0x49, 0x4e, 0x53, 0x48, 0x49, 0x50,
	0x10, 0x15, 0x2a, 0xaa, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x43, 0x61, 0x6c, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x4d, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x48,
	0x49, 0x47, 0x48, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x1f,
	0x0a, 0x1b, 0x44, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x41, 0x43,
	0x48, 0x5f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x06, 0x2a,
	0x25, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x32, 0xb0, 0x01, 0x0a, 0x14, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x06,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x12, 0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x7d, 0x0a, 0x15, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x69, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x12, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x32, 0xf9, 0x03, 0x0a, 0x13, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x43, 0x75,
	0x73, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x0c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x4b, 0x65, 0x79, 0x1a, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x0c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65,
	0x79, 0x1a, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x74, 0x67,
	0x73, 0x12, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x74, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x12,
	0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x42, 0x79, 0x46,
	0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x12, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0x00, 0x32, 0x83, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x75, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x12, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x96, 0x04, 0x0a, 0x06, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12,
	0x2e, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79,
	0x43, 0x75, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x0c, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x0f, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x74, 0x67, 0x73,
	0x12, 0x0e, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x74, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x42, 0x69, 0x6c, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x12, 0x17,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x6f,
	0x72, 0x6d, 0x4e, 0x6f, 0x12, 0x17, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x15, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_service_proto_goTypes = []interface{}{
	(VERION)(0),                     // 0: billing.VERION
	(MeterOperationStatus)(0),       // 1: billing.MeterOperationStatus
	(SERVICE_TYPE)(0),               // 2: billing.SERVICE_TYPE
	(CONNECTION_STATUS_TYPE)(0),     // 3: billing.CONNECTION_STATUS_TYPE
	(READING_TYPE)(0),               // 4: billing.READING_TYPE
	(RegularChargePeriod)(0),        // 5: billing.RegularChargePeriod
	(ENTITY_TYPE)(0),                // 6: billing.ENTITY_TYPE
	(ChargeRegularCalcStrategy)(0),  // 7: billing.ChargeRegularCalcStrategy
	(ChargeType)(0),                 // 8: billing.ChargeType
	(ReleationType)(0),              // 9: billing.ReleationType
	(*Empty)(nil),                   // 10: billing.Empty
	(*Meter)(nil),                   // 11: billing.Meter
	(*Connection)(nil),              // 12: billing.Connection
	(*SubConnection)(nil),           // 13: billing.SubConnection
	(*Service)(nil),                 // 14: billing.Service
	(*Property)(nil),                // 15: billing.Property
	(*Customer)(nil),                // 16: billing.Customer
	(*ServiceTariff)(nil),           // 17: billing.ServiceTariff
	(*Ctg)(nil),                     // 18: billing.Ctg
	(*ExtraTariffFess)(nil),         // 19: billing.ExtraTariffFess
	(*TariffBand)(nil),              // 20: billing.TariffBand
	(*Tariff)(nil),                  // 21: billing.Tariff
	(*EntityChargeMappedValue)(nil), // 22: billing.EntityChargeMappedValue
	(*EntityEnableMappedValue)(nil), // 23: billing.EntityEnableMappedValue
	(*RegularChargeEntity)(nil),     // 24: billing.RegularChargeEntity
	(*RegularEnableEntity)(nil),     // 25: billing.RegularEnableEntity
	(*RegularCharge)(nil),           // 26: billing.RegularCharge
	(*RegularChargeRequest)(nil),    // 27: billing.RegularChargeRequest
	(*TransCode)(nil),               // 28: billing.TransCode
	(*ServiceType)(nil),             // 29: billing.ServiceType
	(*ServiceTypeRepsonce)(nil),     // 30: billing.ServiceTypeRepsonce
	(*ChargeSetting)(nil),           // 31: billing.ChargeSetting
	(*SubConnectionReading)(nil),    // 32: billing.SubConnectionReading
	(*Reading)(nil),                 // 33: billing.Reading
	(*ServiceReading)(nil),          // 34: billing.ServiceReading
	(*ChargeRequest)(nil),           // 35: billing.ChargeRequest
	(*ExtraCharge)(nil),             // 36: billing.ExtraCharge
	(*MeasuredTransaction)(nil),     // 37: billing.MeasuredTransaction
	(*FinantialTransaction)(nil),    // 38: billing.FinantialTransaction
	(*Bill)(nil),                    // 39: billing.Bill
	(*CancelledRequest)(nil),        // 40: billing.CancelledRequest
	(*BillResponce)(nil),            // 41: billing.BillResponce
	(*ServiceInfo)(nil),             // 42: billing.ServiceInfo
	(*SetupData)(nil),               // 43: billing.SetupData
	(*CustomersList)(nil),           // 44: billing.CustomersList
	(*Key)(nil),                     // 45: billing.Key
	(*LookUp)(nil),                  // 46: billing.LookUp
	(*LookUpsResponce)(nil),         // 47: billing.LookUpsResponce
	(*CtgsResponce)(nil),            // 48: billing.CtgsResponce
	(*Entity)(nil),                  // 49: billing.Entity
	(*GetBillRequest)(nil),          // 50: billing.GetBillRequest
	(*LoginRequest)(nil),            // 51: billing.LoginRequest
	(*LoginResponce)(nil),           // 52: billing.LoginResponce
	(*PostMessage)(nil),             // 53: billing.PostMessage
	(*timestamp.Timestamp)(nil),     // 54: google.protobuf.Timestamp
}
var file_service_proto_depIdxs = []int32{
	1,  // 0: billing.Meter.OpStatus:type_name -> billing.MeterOperationStatus
	18, // 1: billing.Connection.CType:type_name -> billing.Ctg
	11, // 2: billing.Connection.Meter:type_name -> billing.Meter
	3,  // 3: billing.Connection.ConnectionStatus:type_name -> billing.CONNECTION_STATUS_TYPE
	13, // 4: billing.Connection.SubConnections:type_name -> billing.SubConnection
	18, // 5: billing.SubConnection.CType:type_name -> billing.Ctg
	2,  // 6: billing.Service.ServiceType:type_name -> billing.SERVICE_TYPE
	12, // 7: billing.Service.Connection:type_name -> billing.Connection
	14, // 8: billing.Property.Services:type_name -> billing.Service
	15, // 9: billing.Customer.Property:type_name -> billing.Property
	2,  // 10: billing.ServiceTariff.ServiceType:type_name -> billing.SERVICE_TYPE
	17, // 11: billing.Ctg.Tariffs:type_name -> billing.ServiceTariff
	19, // 12: billing.Tariff.ExtraFees:type_name -> billing.ExtraTariffFess
	20, // 13: billing.Tariff.Bands:type_name -> billing.TariffBand
	54, // 14: billing.Tariff.EffectDate:type_name -> google.protobuf.Timestamp
	6,  // 15: billing.RegularChargeEntity.EntityType:type_name -> billing.ENTITY_TYPE
	22, // 16: billing.RegularChargeEntity.MappedValues:type_name -> billing.EntityChargeMappedValue
	6,  // 17: billing.RegularEnableEntity.EntityType:type_name -> billing.ENTITY_TYPE
	23, // 18: billing.RegularEnableEntity.MappedValues:type_name -> billing.EntityEnableMappedValue
	54, // 19: billing.RegularCharge.EffectDate:type_name -> google.protobuf.Timestamp
	54, // 20: billing.RegularCharge.EffectDateTo:type_name -> google.protobuf.Timestamp
	2,  // 21: billing.RegularCharge.ServiceType:type_name -> billing.SERVICE_TYPE
	5,  // 22: billing.RegularCharge.ChargeCalcPeriod:type_name -> billing.RegularChargePeriod
	8,  // 23: billing.RegularCharge.ChargeType:type_name -> billing.ChargeType
	24, // 24: billing.RegularCharge.RelationChargeEntity:type_name -> billing.RegularChargeEntity
	25, // 25: billing.RegularCharge.RelationEnableEntity:type_name -> billing.RegularEnableEntity
	7,  // 26: billing.RegularCharge.CTypeCalcBase:type_name -> billing.ChargeRegularCalcStrategy
	26, // 27: billing.RegularChargeRequest.RegularCharge:type_name -> billing.RegularCharge
	2,  // 28: billing.ServiceType.SType:type_name -> billing.SERVICE_TYPE
	2,  // 29: billing.ServiceTypeRepsonce.SType:type_name -> billing.SERVICE_TYPE
	54, // 30: billing.ChargeSetting.BilingDate:type_name -> google.protobuf.Timestamp
	18, // 31: billing.SubConnectionReading.Ctype:type_name -> billing.Ctg
	54, // 32: billing.Reading.PrDate:type_name -> google.protobuf.Timestamp
	54, // 33: billing.Reading.CrDate:type_name -> google.protobuf.Timestamp
	4,  // 34: billing.Reading.ReadType:type_name -> billing.READING_TYPE
	2,  // 35: billing.ServiceReading.ServiceType:type_name -> billing.SERVICE_TYPE
	33, // 36: billing.ServiceReading.Reading:type_name -> billing.Reading
	16, // 37: billing.ChargeRequest.Customer:type_name -> billing.Customer
	34, // 38: billing.ChargeRequest.ServicesReadings:type_name -> billing.ServiceReading
	31, // 39: billing.ChargeRequest.Setting:type_name -> billing.ChargeSetting
	2,  // 40: billing.ChargeRequest.Services:type_name -> billing.SERVICE_TYPE
	39, // 41: billing.ChargeRequest.OldBill:type_name -> billing.Bill
	4,  // 42: billing.MeasuredTransaction.ReadType:type_name -> billing.READING_TYPE
	2,  // 43: billing.FinantialTransaction.ServiceType:type_name -> billing.SERVICE_TYPE
	54, // 44: billing.FinantialTransaction.BilngDate:type_name -> google.protobuf.Timestamp
	54, // 45: billing.FinantialTransaction.EffDate:type_name -> google.protobuf.Timestamp
	18, // 46: billing.FinantialTransaction.Ctype:type_name -> billing.Ctg
	37, // 47: billing.FinantialTransaction.MTransaction:type_name -> billing.MeasuredTransaction
	54, // 48: billing.Bill.BilngDate:type_name -> google.protobuf.Timestamp
	38, // 49: billing.Bill.FTransactions:type_name -> billing.FinantialTransaction
	34, // 50: billing.Bill.ServicesReadings:type_name -> billing.ServiceReading
	16, // 51: billing.Bill.Customer:type_name -> billing.Customer
	54, // 52: billing.CancelledRequest.FormDate:type_name -> google.protobuf.Timestamp
	39, // 53: billing.BillResponce.Bills:type_name -> billing.Bill
	40, // 54: billing.BillResponce.RecalcForm:type_name -> billing.CancelledRequest
	21, // 55: billing.SetupData.Tariffs:type_name -> billing.Tariff
	18, // 56: billing.SetupData.Ctgs:type_name -> billing.Ctg
	26, // 57: billing.SetupData.RegularCharges:type_name -> billing.RegularCharge
	28, // 58: billing.SetupData.TransCodes:type_name -> billing.TransCode
	16, // 59: billing.CustomersList.Customers:type_name -> billing.Customer
	54, // 60: billing.Key.BilngDate:type_name -> google.protobuf.Timestamp
	46, // 61: billing.LookUpsResponce.LookUps:type_name -> billing.LookUp
	18, // 62: billing.CtgsResponce.Ctgs:type_name -> billing.Ctg
	6,  // 63: billing.Entity.EntityType:type_name -> billing.ENTITY_TYPE
	54, // 64: billing.GetBillRequest.BilngDateFrom:type_name -> google.protobuf.Timestamp
	54, // 65: billing.GetBillRequest.BilngDateTo:type_name -> google.protobuf.Timestamp
	41, // 66: billing.PostMessage.Data:type_name -> billing.BillResponce
	10, // 67: billing.BillingChargeService.Info:input_type -> billing.Empty
	35, // 68: billing.BillingChargeService.Charge:input_type -> billing.ChargeRequest
	43, // 69: billing.BillingChargeService.Setup:input_type -> billing.SetupData
	10, // 70: billing.BillingTariffProvider.Info:input_type -> billing.Empty
	10, // 71: billing.BillingTariffProvider.GetSetupData:input_type -> billing.Empty
	10, // 72: billing.BillingDataProvider.Info:input_type -> billing.Empty
	45, // 73: billing.BillingDataProvider.GetCustomerByCustkey:input_type -> billing.Key
	45, // 74: billing.BillingDataProvider.GetCustomersByBillgroup:input_type -> billing.Key
	49, // 75: billing.BillingDataProvider.GetLoockup:input_type -> billing.Entity
	10, // 76: billing.BillingDataProvider.GetCtgs:input_type -> billing.Empty
	50, // 77: billing.BillingDataProvider.GetBillsByCustkey:input_type -> billing.GetBillRequest
	50, // 78: billing.BillingDataProvider.GetBillsByFormNo:input_type -> billing.GetBillRequest
	51, // 79: billing.BillingDataProvider.Login:input_type -> billing.LoginRequest
	10, // 80: billing.BillingDataCousumer.Info:input_type -> billing.Empty
	53, // 81: billing.BillingDataCousumer.WriteFinantialData:input_type -> billing.PostMessage
	10, // 82: billing.Engine.Info:input_type -> billing.Empty
	35, // 83: billing.Engine.Calulate:input_type -> billing.ChargeRequest
	53, // 84: billing.Engine.Post:input_type -> billing.PostMessage
	45, // 85: billing.Engine.GetCustomerByCustkey:input_type -> billing.Key
	49, // 86: billing.Engine.GetLoockup:input_type -> billing.Entity
	10, // 87: billing.Engine.GetCtgs:input_type -> billing.Empty
	50, // 88: billing.Engine.GetBillsByCustkey:input_type -> billing.GetBillRequest
	50, // 89: billing.Engine.GetBillsByFormNo:input_type -> billing.GetBillRequest
	51, // 90: billing.Engine.Login:input_type -> billing.LoginRequest
	42, // 91: billing.BillingChargeService.Info:output_type -> billing.ServiceInfo
	41, // 92: billing.BillingChargeService.Charge:output_type -> billing.BillResponce
	10, // 93: billing.BillingChargeService.Setup:output_type -> billing.Empty
	42, // 94: billing.BillingTariffProvider.Info:output_type -> billing.ServiceInfo
	43, // 95: billing.BillingTariffProvider.GetSetupData:output_type -> billing.SetupData
	42, // 96: billing.BillingDataProvider.Info:output_type -> billing.ServiceInfo
	16, // 97: billing.BillingDataProvider.GetCustomerByCustkey:output_type -> billing.Customer
	44, // 98: billing.BillingDataProvider.GetCustomersByBillgroup:output_type -> billing.CustomersList
	47, // 99: billing.BillingDataProvider.GetLoockup:output_type -> billing.LookUpsResponce
	48, // 100: billing.BillingDataProvider.GetCtgs:output_type -> billing.CtgsResponce
	41, // 101: billing.BillingDataProvider.GetBillsByCustkey:output_type -> billing.BillResponce
	41, // 102: billing.BillingDataProvider.GetBillsByFormNo:output_type -> billing.BillResponce
	52, // 103: billing.BillingDataProvider.Login:output_type -> billing.LoginResponce
	42, // 104: billing.BillingDataCousumer.Info:output_type -> billing.ServiceInfo
	10, // 105: billing.BillingDataCousumer.WriteFinantialData:output_type -> billing.Empty
	42, // 106: billing.Engine.Info:output_type -> billing.ServiceInfo
	41, // 107: billing.Engine.Calulate:output_type -> billing.BillResponce
	10, // 108: billing.Engine.Post:output_type -> billing.Empty
	16, // 109: billing.Engine.GetCustomerByCustkey:output_type -> billing.Customer
	47, // 110: billing.Engine.GetLoockup:output_type -> billing.LookUpsResponce
	48, // 111: billing.Engine.GetCtgs:output_type -> billing.CtgsResponce
	41, // 112: billing.Engine.GetBillsByCustkey:output_type -> billing.BillResponce
	41, // 113: billing.Engine.GetBillsByFormNo:output_type -> billing.BillResponce
	52, // 114: billing.Engine.Login:output_type -> billing.LoginResponce
	91, // [91:115] is the sub-list for method output_type
	67, // [67:91] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceTariff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ctg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraTariffFess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TariffBand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tariff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityChargeMappedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityEnableMappedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegularChargeEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegularEnableEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegularCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegularChargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceTypeRepsonce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubConnectionReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasuredTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinantialTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillResponce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomersList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpsResponce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtgsResponce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BillingChargeServiceClient is the client API for BillingChargeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BillingChargeServiceClient interface {
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error)
	Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*BillResponce, error)
	Setup(ctx context.Context, in *SetupData, opts ...grpc.CallOption) (*Empty, error)
}

type billingChargeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingChargeServiceClient(cc grpc.ClientConnInterface) BillingChargeServiceClient {
	return &billingChargeServiceClient{cc}
}

func (c *billingChargeServiceClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/billing.BillingChargeService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingChargeServiceClient) Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*BillResponce, error) {
	out := new(BillResponce)
	err := c.cc.Invoke(ctx, "/billing.BillingChargeService/Charge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingChargeServiceClient) Setup(ctx context.Context, in *SetupData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/billing.BillingChargeService/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingChargeServiceServer is the server API for BillingChargeService service.
type BillingChargeServiceServer interface {
	Info(context.Context, *Empty) (*ServiceInfo, error)
	Charge(context.Context, *ChargeRequest) (*BillResponce, error)
	Setup(context.Context, *SetupData) (*Empty, error)
}

// UnimplementedBillingChargeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBillingChargeServiceServer struct {
}

func (*UnimplementedBillingChargeServiceServer) Info(context.Context, *Empty) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedBillingChargeServiceServer) Charge(context.Context, *ChargeRequest) (*BillResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charge not implemented")
}
func (*UnimplementedBillingChargeServiceServer) Setup(context.Context, *SetupData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}

func RegisterBillingChargeServiceServer(s *grpc.Server, srv BillingChargeServiceServer) {
	s.RegisterService(&_BillingChargeService_serviceDesc, srv)
}

func _BillingChargeService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingChargeServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingChargeService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingChargeServiceServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingChargeService_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingChargeServiceServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingChargeService/Charge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingChargeServiceServer).Charge(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingChargeService_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingChargeServiceServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingChargeService/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingChargeServiceServer).Setup(ctx, req.(*SetupData))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillingChargeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.BillingChargeService",
	HandlerType: (*BillingChargeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _BillingChargeService_Info_Handler,
		},
		{
			MethodName: "Charge",
			Handler:    _BillingChargeService_Charge_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _BillingChargeService_Setup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// BillingTariffProviderClient is the client API for BillingTariffProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BillingTariffProviderClient interface {
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error)
	GetSetupData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SetupData, error)
}

type billingTariffProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingTariffProviderClient(cc grpc.ClientConnInterface) BillingTariffProviderClient {
	return &billingTariffProviderClient{cc}
}

func (c *billingTariffProviderClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/billing.BillingTariffProvider/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingTariffProviderClient) GetSetupData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SetupData, error) {
	out := new(SetupData)
	err := c.cc.Invoke(ctx, "/billing.BillingTariffProvider/GetSetupData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingTariffProviderServer is the server API for BillingTariffProvider service.
type BillingTariffProviderServer interface {
	Info(context.Context, *Empty) (*ServiceInfo, error)
	GetSetupData(context.Context, *Empty) (*SetupData, error)
}

// UnimplementedBillingTariffProviderServer can be embedded to have forward compatible implementations.
type UnimplementedBillingTariffProviderServer struct {
}

func (*UnimplementedBillingTariffProviderServer) Info(context.Context, *Empty) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedBillingTariffProviderServer) GetSetupData(context.Context, *Empty) (*SetupData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetupData not implemented")
}

func RegisterBillingTariffProviderServer(s *grpc.Server, srv BillingTariffProviderServer) {
	s.RegisterService(&_BillingTariffProvider_serviceDesc, srv)
}

func _BillingTariffProvider_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingTariffProviderServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingTariffProvider/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingTariffProviderServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingTariffProvider_GetSetupData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingTariffProviderServer).GetSetupData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingTariffProvider/GetSetupData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingTariffProviderServer).GetSetupData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillingTariffProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.BillingTariffProvider",
	HandlerType: (*BillingTariffProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _BillingTariffProvider_Info_Handler,
		},
		{
			MethodName: "GetSetupData",
			Handler:    _BillingTariffProvider_GetSetupData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// BillingDataProviderClient is the client API for BillingDataProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BillingDataProviderClient interface {
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error)
	GetCustomerByCustkey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Customer, error)
	GetCustomersByBillgroup(ctx context.Context, in *Key, opts ...grpc.CallOption) (*CustomersList, error)
	GetLoockup(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*LookUpsResponce, error)
	GetCtgs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CtgsResponce, error)
	GetBillsByCustkey(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponce, error)
	GetBillsByFormNo(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponce, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponce, error)
}

type billingDataProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingDataProviderClient(cc grpc.ClientConnInterface) BillingDataProviderClient {
	return &billingDataProviderClient{cc}
}

func (c *billingDataProviderClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/billing.BillingDataProvider/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingDataProviderClient) GetCustomerByCustkey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/billing.BillingDataProvider/GetCustomerByCustkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingDataProviderClient) GetCustomersByBillgroup(ctx context.Context, in *Key, opts ...grpc.CallOption) (*CustomersList, error) {
	out := new(CustomersList)
	err := c.cc.Invoke(ctx, "/billing.BillingDataProvider/GetCustomersByBillgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingDataProviderClient) GetLoockup(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*LookUpsResponce, error) {
	out := new(LookUpsResponce)
	err := c.cc.Invoke(ctx, "/billing.BillingDataProvider/GetLoockup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingDataProviderClient) GetCtgs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CtgsResponce, error) {
	out := new(CtgsResponce)
	err := c.cc.Invoke(ctx, "/billing.BillingDataProvider/GetCtgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingDataProviderClient) GetBillsByCustkey(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponce, error) {
	out := new(BillResponce)
	err := c.cc.Invoke(ctx, "/billing.BillingDataProvider/GetBillsByCustkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingDataProviderClient) GetBillsByFormNo(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponce, error) {
	out := new(BillResponce)
	err := c.cc.Invoke(ctx, "/billing.BillingDataProvider/GetBillsByFormNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingDataProviderClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponce, error) {
	out := new(LoginResponce)
	err := c.cc.Invoke(ctx, "/billing.BillingDataProvider/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingDataProviderServer is the server API for BillingDataProvider service.
type BillingDataProviderServer interface {
	Info(context.Context, *Empty) (*ServiceInfo, error)
	GetCustomerByCustkey(context.Context, *Key) (*Customer, error)
	GetCustomersByBillgroup(context.Context, *Key) (*CustomersList, error)
	GetLoockup(context.Context, *Entity) (*LookUpsResponce, error)
	GetCtgs(context.Context, *Empty) (*CtgsResponce, error)
	GetBillsByCustkey(context.Context, *GetBillRequest) (*BillResponce, error)
	GetBillsByFormNo(context.Context, *GetBillRequest) (*BillResponce, error)
	Login(context.Context, *LoginRequest) (*LoginResponce, error)
}

// UnimplementedBillingDataProviderServer can be embedded to have forward compatible implementations.
type UnimplementedBillingDataProviderServer struct {
}

func (*UnimplementedBillingDataProviderServer) Info(context.Context, *Empty) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedBillingDataProviderServer) GetCustomerByCustkey(context.Context, *Key) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByCustkey not implemented")
}
func (*UnimplementedBillingDataProviderServer) GetCustomersByBillgroup(context.Context, *Key) (*CustomersList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomersByBillgroup not implemented")
}
func (*UnimplementedBillingDataProviderServer) GetLoockup(context.Context, *Entity) (*LookUpsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoockup not implemented")
}
func (*UnimplementedBillingDataProviderServer) GetCtgs(context.Context, *Empty) (*CtgsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCtgs not implemented")
}
func (*UnimplementedBillingDataProviderServer) GetBillsByCustkey(context.Context, *GetBillRequest) (*BillResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillsByCustkey not implemented")
}
func (*UnimplementedBillingDataProviderServer) GetBillsByFormNo(context.Context, *GetBillRequest) (*BillResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillsByFormNo not implemented")
}
func (*UnimplementedBillingDataProviderServer) Login(context.Context, *LoginRequest) (*LoginResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterBillingDataProviderServer(s *grpc.Server, srv BillingDataProviderServer) {
	s.RegisterService(&_BillingDataProvider_serviceDesc, srv)
}

func _BillingDataProvider_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataProviderServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataProvider/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataProviderServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingDataProvider_GetCustomerByCustkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataProviderServer).GetCustomerByCustkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataProvider/GetCustomerByCustkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataProviderServer).GetCustomerByCustkey(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingDataProvider_GetCustomersByBillgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataProviderServer).GetCustomersByBillgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataProvider/GetCustomersByBillgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataProviderServer).GetCustomersByBillgroup(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingDataProvider_GetLoockup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataProviderServer).GetLoockup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataProvider/GetLoockup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataProviderServer).GetLoockup(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingDataProvider_GetCtgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataProviderServer).GetCtgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataProvider/GetCtgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataProviderServer).GetCtgs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingDataProvider_GetBillsByCustkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataProviderServer).GetBillsByCustkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataProvider/GetBillsByCustkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataProviderServer).GetBillsByCustkey(ctx, req.(*GetBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingDataProvider_GetBillsByFormNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataProviderServer).GetBillsByFormNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataProvider/GetBillsByFormNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataProviderServer).GetBillsByFormNo(ctx, req.(*GetBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingDataProvider_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataProviderServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataProvider/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataProviderServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillingDataProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.BillingDataProvider",
	HandlerType: (*BillingDataProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _BillingDataProvider_Info_Handler,
		},
		{
			MethodName: "GetCustomerByCustkey",
			Handler:    _BillingDataProvider_GetCustomerByCustkey_Handler,
		},
		{
			MethodName: "GetCustomersByBillgroup",
			Handler:    _BillingDataProvider_GetCustomersByBillgroup_Handler,
		},
		{
			MethodName: "GetLoockup",
			Handler:    _BillingDataProvider_GetLoockup_Handler,
		},
		{
			MethodName: "GetCtgs",
			Handler:    _BillingDataProvider_GetCtgs_Handler,
		},
		{
			MethodName: "GetBillsByCustkey",
			Handler:    _BillingDataProvider_GetBillsByCustkey_Handler,
		},
		{
			MethodName: "GetBillsByFormNo",
			Handler:    _BillingDataProvider_GetBillsByFormNo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _BillingDataProvider_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// BillingDataCousumerClient is the client API for BillingDataCousumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BillingDataCousumerClient interface {
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error)
	WriteFinantialData(ctx context.Context, in *PostMessage, opts ...grpc.CallOption) (*Empty, error)
}

type billingDataCousumerClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingDataCousumerClient(cc grpc.ClientConnInterface) BillingDataCousumerClient {
	return &billingDataCousumerClient{cc}
}

func (c *billingDataCousumerClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/billing.BillingDataCousumer/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingDataCousumerClient) WriteFinantialData(ctx context.Context, in *PostMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/billing.BillingDataCousumer/WriteFinantialData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingDataCousumerServer is the server API for BillingDataCousumer service.
type BillingDataCousumerServer interface {
	Info(context.Context, *Empty) (*ServiceInfo, error)
	WriteFinantialData(context.Context, *PostMessage) (*Empty, error)
}

// UnimplementedBillingDataCousumerServer can be embedded to have forward compatible implementations.
type UnimplementedBillingDataCousumerServer struct {
}

func (*UnimplementedBillingDataCousumerServer) Info(context.Context, *Empty) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedBillingDataCousumerServer) WriteFinantialData(context.Context, *PostMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFinantialData not implemented")
}

func RegisterBillingDataCousumerServer(s *grpc.Server, srv BillingDataCousumerServer) {
	s.RegisterService(&_BillingDataCousumer_serviceDesc, srv)
}

func _BillingDataCousumer_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataCousumerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataCousumer/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataCousumerServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingDataCousumer_WriteFinantialData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingDataCousumerServer).WriteFinantialData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.BillingDataCousumer/WriteFinantialData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingDataCousumerServer).WriteFinantialData(ctx, req.(*PostMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillingDataCousumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.BillingDataCousumer",
	HandlerType: (*BillingDataCousumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _BillingDataCousumer_Info_Handler,
		},
		{
			MethodName: "WriteFinantialData",
			Handler:    _BillingDataCousumer_WriteFinantialData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngineClient interface {
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error)
	Calulate(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*BillResponce, error)
	Post(ctx context.Context, in *PostMessage, opts ...grpc.CallOption) (*Empty, error)
	GetCustomerByCustkey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Customer, error)
	GetLoockup(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*LookUpsResponce, error)
	GetCtgs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CtgsResponce, error)
	GetBillsByCustkey(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponce, error)
	GetBillsByFormNo(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponce, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponce, error)
}

type engineClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineClient(cc grpc.ClientConnInterface) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/billing.Engine/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) Calulate(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*BillResponce, error) {
	out := new(BillResponce)
	err := c.cc.Invoke(ctx, "/billing.Engine/Calulate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) Post(ctx context.Context, in *PostMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/billing.Engine/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetCustomerByCustkey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/billing.Engine/GetCustomerByCustkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetLoockup(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*LookUpsResponce, error) {
	out := new(LookUpsResponce)
	err := c.cc.Invoke(ctx, "/billing.Engine/GetLoockup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetCtgs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CtgsResponce, error) {
	out := new(CtgsResponce)
	err := c.cc.Invoke(ctx, "/billing.Engine/GetCtgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetBillsByCustkey(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponce, error) {
	out := new(BillResponce)
	err := c.cc.Invoke(ctx, "/billing.Engine/GetBillsByCustkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) GetBillsByFormNo(ctx context.Context, in *GetBillRequest, opts ...grpc.CallOption) (*BillResponce, error) {
	out := new(BillResponce)
	err := c.cc.Invoke(ctx, "/billing.Engine/GetBillsByFormNo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponce, error) {
	out := new(LoginResponce)
	err := c.cc.Invoke(ctx, "/billing.Engine/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
type EngineServer interface {
	Info(context.Context, *Empty) (*ServiceInfo, error)
	Calulate(context.Context, *ChargeRequest) (*BillResponce, error)
	Post(context.Context, *PostMessage) (*Empty, error)
	GetCustomerByCustkey(context.Context, *Key) (*Customer, error)
	GetLoockup(context.Context, *Entity) (*LookUpsResponce, error)
	GetCtgs(context.Context, *Empty) (*CtgsResponce, error)
	GetBillsByCustkey(context.Context, *GetBillRequest) (*BillResponce, error)
	GetBillsByFormNo(context.Context, *GetBillRequest) (*BillResponce, error)
	Login(context.Context, *LoginRequest) (*LoginResponce, error)
}

// UnimplementedEngineServer can be embedded to have forward compatible implementations.
type UnimplementedEngineServer struct {
}

func (*UnimplementedEngineServer) Info(context.Context, *Empty) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedEngineServer) Calulate(context.Context, *ChargeRequest) (*BillResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calulate not implemented")
}
func (*UnimplementedEngineServer) Post(context.Context, *PostMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (*UnimplementedEngineServer) GetCustomerByCustkey(context.Context, *Key) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerByCustkey not implemented")
}
func (*UnimplementedEngineServer) GetLoockup(context.Context, *Entity) (*LookUpsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoockup not implemented")
}
func (*UnimplementedEngineServer) GetCtgs(context.Context, *Empty) (*CtgsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCtgs not implemented")
}
func (*UnimplementedEngineServer) GetBillsByCustkey(context.Context, *GetBillRequest) (*BillResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillsByCustkey not implemented")
}
func (*UnimplementedEngineServer) GetBillsByFormNo(context.Context, *GetBillRequest) (*BillResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillsByFormNo not implemented")
}
func (*UnimplementedEngineServer) Login(context.Context, *LoginRequest) (*LoginResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Engine/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_Calulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Calulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Engine/Calulate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Calulate(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Engine/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Post(ctx, req.(*PostMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetCustomerByCustkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetCustomerByCustkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Engine/GetCustomerByCustkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetCustomerByCustkey(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetLoockup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetLoockup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Engine/GetLoockup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetLoockup(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetCtgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetCtgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Engine/GetCtgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetCtgs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetBillsByCustkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetBillsByCustkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Engine/GetBillsByCustkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetBillsByCustkey(ctx, req.(*GetBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_GetBillsByFormNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetBillsByFormNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Engine/GetBillsByFormNo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetBillsByFormNo(ctx, req.(*GetBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Engine/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Engine_Info_Handler,
		},
		{
			MethodName: "Calulate",
			Handler:    _Engine_Calulate_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _Engine_Post_Handler,
		},
		{
			MethodName: "GetCustomerByCustkey",
			Handler:    _Engine_GetCustomerByCustkey_Handler,
		},
		{
			MethodName: "GetLoockup",
			Handler:    _Engine_GetLoockup_Handler,
		},
		{
			MethodName: "GetCtgs",
			Handler:    _Engine_GetCtgs_Handler,
		},
		{
			MethodName: "GetBillsByCustkey",
			Handler:    _Engine_GetBillsByCustkey_Handler,
		},
		{
			MethodName: "GetBillsByFormNo",
			Handler:    _Engine_GetBillsByFormNo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Engine_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
